<script>
  import { onMount } from 'svelte';
  import { apiClient } from '$lib/api/client';
  import { toastStore } from '$lib/stores/toast';
  import { 
    Mic, 
    Play, 
    Pause, 
    Download, 
    Upload,
    RefreshCw,
    Volume2,
    VolumeX,
    Settings,
    Waveform,
    Users,
    Globe,
    Heart,
    Copy,
    Trash2,
    FileAudio,
    Clock
  } from 'lucide-svelte';

  let isGenerating = false;
  let isPlaying = false;
  let currentAudio = null;
  let audioProgress = 0;
  let generatedAudio = null;
  let audioHistory = [];
  let showAdvanced = false;
  let customVoiceFile = null;
  
  // Form data
  let formData = {
    text: '',
    voice_id: 'sarah',
    speed: 1.0,
    pitch: 1.0,
    emotion: 'neutral',
    language: 'en',
    stability: 0.7,
    clarity: 0.8,
    output_format: 'mp3'
  };

  // Voice options
  const voices = [
    { 
      id: 'sarah', 
      name: 'Sarah', 
      gender: 'female', 
      accent: 'American',
      description: 'Professional and clear',
      sample: 'Professional news anchor style voice',
      age: 'adult',
      languages: ['en']
    },
    { 
      id: 'james', 
      name: 'James', 
      gender: 'male', 
      accent: 'British',
      description: 'Authoritative and warm',
      sample: 'Documentary narrator voice',
      age: 'adult',
      languages: ['en']
    },
    { 
      id: 'maria', 
      name: 'Maria', 
      gender: 'female', 
      accent: 'Spanish',
      description: 'Energetic and friendly',
      sample: 'Enthusiastic tutorial presenter',
      age: 'young_adult',
      languages: ['en', 'es']
    },
    { 
      id: 'alex', 
      name: 'Alex', 
      gender: 'neutral', 
      accent: 'Canadian',
      description: 'Versatile and natural',
      sample: 'Conversational podcast host',
      age: 'adult',
      languages: ['en', 'fr']
    },
    { 
      id: 'kenji', 
      name: 'Kenji', 
      gender: 'male', 
      accent: 'Japanese',
      description: 'Calm and precise',
      sample: 'Educational content narrator',
      age: 'adult',
      languages: ['en', 'ja']
    },
    { 
      id: 'emma', 
      name: 'Emma', 
      gender: 'female', 
      accent: 'Australian',
      description: 'Bright and engaging',
      sample: 'Social media content creator',
      age: 'young_adult',
      languages: ['en']
    }
  ];

  const emotions = [
    { value: 'neutral', label: 'Neutral', description: 'Balanced and professional' },
    { value: 'happy', label: 'Happy', description: 'Upbeat and positive' },
    { value: 'sad', label: 'Sad', description: 'Melancholic and somber' },
    { value: 'angry', label: 'Angry', description: 'Intense and forceful' },
    { value: 'excited', label: 'Excited', description: 'Energetic and enthusiastic' },
    { value: 'calm', label: 'Calm', description: 'Peaceful and relaxed' },
    { value: 'serious', label: 'Serious', description: 'Authoritative and formal' }
  ];

  const languages = [
    { code: 'en', name: 'English', flag: 'üá∫üá∏' },
    { code: 'es', name: 'Spanish', flag: 'üá™üá∏' },
    { code: 'fr', name: 'French', flag: 'üá´üá∑' },
    { code: 'de', name: 'German', flag: 'üá©üá™' },
    { code: 'it', name: 'Italian', flag: 'üáÆüáπ' },
    { code: 'pt', name: 'Portuguese', flag: 'üáµüáπ' },
    { code: 'ru', name: 'Russian', flag: 'üá∑üá∫' },
    { code: 'ja', name: 'Japanese', flag: 'üáØüáµ' },
    { code: 'ko', name: 'Korean', flag: 'üá∞üá∑' },
    { code: 'zh', name: 'Chinese', flag: 'üá®üá≥' }
  ];

  const sampleTexts = [
    "Welcome to our channel! Today we're going to explore the fascinating world of artificial intelligence.",
    "In this tutorial, I'll show you step-by-step how to create amazing content that engages your audience.",
    "Breaking news: Scientists have made a groundbreaking discovery that could change everything we know.",
    "Let me tell you a story about innovation, perseverance, and the power of human creativity.",
    "Thank you for watching! Don't forget to subscribe and hit the notification bell for more content."
  ];

  onMount(() => {
    loadAudioHistory();
  });

  async function loadAudioHistory() {
    try {
      // Simulate loading audio history
      audioHistory = [
        {
          id: 1,
          text: 'Welcome to our AI voice synthesis demo...',
          voice_name: 'Sarah',
          duration: 15,
          createdAt: new Date().toISOString(),
          liked: false,
          downloads: 5
        },
        {
          id: 2,
          text: 'This is a test of the emergency broadcast system...',
          voice_name: 'James',
          duration: 8,
          createdAt: new Date(Date.now() - 86400000).toISOString(),
          liked: true,
          downloads: 12
        }
      ];
    } catch (error) {
      console.error('Error loading audio history:', error);
    }
  }

  async function generateVoice() {
    if (!formData.text.trim()) {
      toastStore.error('Please enter text to convert to speech');
      return;
    }

    isGenerating = true;
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const mockAudio = {
        id: Date.now(),
        text: formData.text,
        voice_id: formData.voice_id,
        voice_name: voices.find(v => v.id === formData.voice_id)?.name || 'Unknown',
        url: '#', // In real app, this would be the audio URL
        duration: Math.ceil(formData.text.split(' ').length / 2.5), // Rough estimation
        speed: formData.speed,
        pitch: formData.pitch,
        emotion: formData.emotion,
        language: formData.language,
        createdAt: new Date().toISOString(),
        liked: false
      };
      
      generatedAudio = mockAudio;
      
      // Add to history
      audioHistory.unshift({
        ...mockAudio,
        downloads: 0
      });
      
      toastStore.success('Voice generated successfully!');
    } catch (error) {
      console.error('Error generating voice:', error);
      toastStore.error('Failed to generate voice. Please try again.');
    } finally {
      isGenerating = false;
    }
  }

  function playAudio(audio) {
    if (currentAudio && !currentAudio.paused) {
      currentAudio.pause();
    }
    
    // In a real app, this would play the actual audio
    isPlaying = true;
    
    // Simulate audio playback
    let progress = 0;
    const interval = setInterval(() => {
      progress += 2;
      audioProgress = progress;
      
      if (progress >= 100) {
        clearInterval(interval);
        isPlaying = false;
        audioProgress = 0;
      }
    }, 100);
  }

  function pauseAudio() {
    isPlaying = false;
    if (currentAudio) {
      currentAudio.pause();
    }
  }

  async function downloadAudio(audio) {
    try {
      // In a real app, this would download the actual audio file
      toastStore.success('Audio downloaded!');
      
      // Update download count
      const historyItem = audioHistory.find(item => item.id === audio.id);
      if (historyItem) {
        historyItem.downloads++;
        audioHistory = audioHistory;
      }
    } catch (error) {
      toastStore.error('Failed to download audio');
    }
  }

  function useSampleText(text) {
    formData.text = text;
  }

  function toggleLike(audioId) {
    const audio = audioHistory.find(item => item.id === audioId);
    if (audio) {
      audio.liked = !audio.liked;
      audioHistory = audioHistory;
    }
    
    if (generatedAudio && generatedAudio.id === audioId) {
      generatedAudio.liked = !generatedAudio.liked;
    }
  }

  function copyText(text) {
    navigator.clipboard.writeText(text);
    toastStore.success('Text copied to clipboard!');
  }

  function getVoiceDetails(voiceId) {
    return voices.find(v => v.id === voiceId) || voices[0];
  }

  function formatDuration(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  }

  function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function handleFileUpload(event) {
    const file = event.target.files[0];
    if (file && file.type.startsWith('audio/')) {
      customVoiceFile = file;
      toastStore.success('Voice file uploaded! Training custom voice...');
      // In real app, this would upload and train the custom voice
    } else {
      toastStore.error('Please upload a valid audio file');
    }
  }

  function getLanguageFlag(code) {
    const lang = languages.find(l => l.code === code);
    return lang ? lang.flag : 'üåê';
  }
</script>

<svelte:head>
  <title>AI Voice Synthesis - AutoVideo</title>
</svelte:head>

<div class="max-w-7xl mx-auto space-y-8">
  <!-- Header -->
  <div class="text-center">
    <div class="flex items-center justify-center mb-4">
      <div class="w-12 h-12 bg-gradient-to-br from-green-500 to-teal-600 rounded-lg flex items-center justify-center">
        <Mic class="w-6 h-6 text-white" />
      </div>
    </div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
      AI Voice Synthesis
    </h1>
    <p class="text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
      Transform text into natural-sounding speech with our advanced AI voice models
    </p>
  </div>

  <div class="grid lg:grid-cols-3 gap-8">
    <!-- Main Form -->
    <div class="lg:col-span-2 space-y-6">
      <!-- Voice Generation Form -->
      <div class="card">
        <div class="card-header">
          <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Text to Speech</h2>
        </div>
        <div class="card-body space-y-6">
          <!-- Text Input -->
          <div>
            <label for="text" class="form-label">
              Text to Convert *
            </label>
            <textarea
              id="text"
              bind:value={formData.text}
              placeholder="Enter the text you want to convert to speech..."
              rows="4"
              class="form-input resize-none"
              disabled={isGenerating}
            ></textarea>
            <div class="mt-2 flex items-center justify-between text-sm">
              <span class="text-gray-500 dark:text-gray-400">
                {formData.text.length} characters ‚Ä¢ ~{Math.ceil(formData.text.split(' ').length / 2.5)}s duration
              </span>
              <div class="flex space-x-2">
                {#each sampleTexts.slice(0, 3) as sample}
                  <button
                    type="button"
                    class="text-primary-600 hover:text-primary-700 dark:text-primary-400 text-xs underline"
                    on:click={() => useSampleText(sample)}
                  >
                    Sample {sampleTexts.indexOf(sample) + 1}
                  </button>
                {/each}
              </div>
            </div>
          </div>

          <!-- Voice Selection -->
          <div>
            <label class="form-label">Choose Voice</label>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              {#each voices as voice}
                <div class="border-2 rounded-lg p-4 cursor-pointer transition-colors {formData.voice_id === voice.id
                  ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20'
                  : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'}"
                  on:click={() => formData.voice_id = voice.id}>
                  
                  <div class="flex items-start justify-between mb-2">
                    <div>
                      <h3 class="font-medium text-gray-900 dark:text-white">{voice.name}</h3>
                      <div class="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400">
                        <span>{voice.gender === 'neutral' ? '‚ö™' : voice.gender === 'male' ? 'üë®' : 'üë©'}</span>
                        <span>{voice.accent}</span>
                        <span>‚Ä¢</span>
                        <span>{voice.age.replace('_', ' ')}</span>
                      </div>
                    </div>
                    <div class="flex space-x-1">
                      {#each voice.languages as lang}
                        <span class="text-sm">{getLanguageFlag(lang)}</span>
                      {/each}
                    </div>
                  </div>
                  
                  <p class="text-sm text-gray-600 dark:text-gray-300 mb-2">{voice.description}</p>
                  
                  <div class="flex items-center justify-between">
                    <p class="text-xs text-gray-500 dark:text-gray-400 italic">"{voice.sample}"</p>
                    <button
                      type="button"
                      class="p-1 text-gray-400 hover:text-primary-600 dark:hover:text-primary-400"
                      on:click|stopPropagation={() => {/* Play sample */}}
                    >
                      <Play class="w-4 h-4" />
                    </button>
                  </div>
                </div>
              {/each}
            </div>
          </div>

          <!-- Voice Settings -->
          <div class="grid md:grid-cols-3 gap-6">
            <div>
              <label for="speed" class="form-label">Speed</label>
              <div class="space-y-2">
                <input
                  id="speed"
                  type="range"
                  bind:value={formData.speed}
                  min="0.5"
                  max="2.0"
                  step="0.1"
                  class="w-full"
                  disabled={isGenerating}
                />
                <div class="text-sm text-gray-600 dark:text-gray-400 text-center">
                  {formData.speed}x
                </div>
              </div>
            </div>
            
            <div>
              <label for="pitch" class="form-label">Pitch</label>
              <div class="space-y-2">
                <input
                  id="pitch"
                  type="range"
                  bind:value={formData.pitch}
                  min="0.5"
                  max="2.0"
                  step="0.1"
                  class="w-full"
                  disabled={isGenerating}
                />
                <div class="text-sm text-gray-600 dark:text-gray-400 text-center">
                  {formData.pitch}x
                </div>
              </div>
            </div>
            
            <div>
              <label for="emotion" class="form-label">Emotion</label>
              <select id="emotion" bind:value={formData.emotion} class="form-input" disabled={isGenerating}>
                {#each emotions as emotion}
                  <option value={emotion.value}>{emotion.label}</option>
                {/each}
              </select>
            </div>
          </div>

          <!-- Advanced Settings -->
          <div>
            <button
              type="button"
              class="flex items-center text-sm text-primary-600 hover:text-primary-700 dark:text-primary-400"
              on:click={() => showAdvanced = !showAdvanced}
            >
              <Settings class="w-4 h-4 mr-2" />
              Advanced Settings
              <div class="ml-1 transition-transform {showAdvanced ? 'rotate-180' : ''}">‚ñº</div>
            </button>
            
            {#if showAdvanced}
              <div class="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg space-y-4">
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label for="stability" class="form-label">Voice Stability</label>
                    <input
                      id="stability"
                      type="range"
                      bind:value={formData.stability}
                      min="0"
                      max="1"
                      step="0.1"
                      class="w-full"
                      disabled={isGenerating}
                    />
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      {formData.stability} (Higher = more consistent)
                    </div>
                  </div>
                  
                  <div>
                    <label for="clarity" class="form-label">Voice Clarity</label>
                    <input
                      id="clarity"
                      type="range"
                      bind:value={formData.clarity}
                      min="0"
                      max="1"
                      step="0.1"
                      class="w-full"
                      disabled={isGenerating}
                    />
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      {formData.clarity} (Higher = clearer speech)
                    </div>
                  </div>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label for="language" class="form-label">Language</label>
                    <select id="language" bind:value={formData.language} class="form-input" disabled={isGenerating}>
                      {#each languages as language}
                        <option value={language.code}>{language.flag} {language.name}</option>
                      {/each}
                    </select>
                  </div>
                  
                  <div>
                    <label for="output_format" class="form-label">Output Format</label>
                    <select id="output_format" bind:value={formData.output_format} class="form-input" disabled={isGenerating}>
                      <option value="mp3">MP3 (Compressed)</option>
                      <option value="wav">WAV (Uncompressed)</option>
                      <option value="flac">FLAC (Lossless)</option>
                    </select>
                  </div>
                </div>
              </div>
            {/if}
          </div>

          <!-- Generate Button -->
          <div>
            <button
              type="button"
              class="btn-primary w-full flex items-center justify-center"
              on:click={generateVoice}
              disabled={isGenerating || !formData.text.trim()}
            >
              {#if isGenerating}
                <RefreshCw class="w-4 h-4 mr-2 animate-spin" />
                Generating Voice...
              {:else}
                <Volume2 class="w-4 h-4 mr-2" />
                Generate Voice
              {/if}
            </button>
          </div>
        </div>
      </div>

      <!-- Generated Audio -->
      {#if generatedAudio}
        <div class="card">
          <div class="card-header">
            <div class="flex items-center justify-between">
              <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Generated Audio</h2>
              <div class="flex items-center space-x-2">
                <button
                  type="button"
                  class="btn-secondary flex items-center"
                  on:click={() => downloadAudio(generatedAudio)}
                >
                  <Download class="w-4 h-4 mr-2" />
                  Download
                </button>
              </div>
            </div>
          </div>
          <div class="card-body">
            <!-- Audio Player -->
            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-6">
              <div class="flex items-center space-x-4 mb-4">
                <button
                  type="button"
                  class="w-12 h-12 bg-primary-600 hover:bg-primary-700 rounded-full flex items-center justify-center text-white transition-colors"
                  on:click={() => isPlaying ? pauseAudio() : playAudio(generatedAudio)}
                >
                  {#if isPlaying}
                    <Pause class="w-6 h-6" />
                  {:else}
                    <Play class="w-6 h-6 ml-1" />
                  {/if}
                </button>
                
                <div class="flex-1">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-gray-900 dark:text-white">
                      {generatedAudio.voice_name} ‚Ä¢ {getVoiceDetails(generatedAudio.voice_id).accent}
                    </span>
                    <span class="text-sm text-gray-500 dark:text-gray-400">
                      {formatDuration(generatedAudio.duration)}
                    </span>
                  </div>
                  
                  <!-- Progress Bar -->
                  <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                    <div 
                      class="bg-primary-600 h-2 rounded-full transition-all duration-100"
                      style="width: {audioProgress}%"
                    ></div>
                  </div>
                </div>
                
                <button
                  type="button"
                  class="p-2 text-gray-400 hover:text-red-500 transition-colors {generatedAudio.liked ? 'text-red-500' : ''}"
                  on:click={() => toggleLike(generatedAudio.id)}
                >
                  <Heart class="w-5 h-5 {generatedAudio.liked ? 'fill-current' : ''}" />
                </button>
              </div>
              
              <!-- Audio Settings Display -->
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-center text-sm">
                <div class="p-2 bg-white dark:bg-gray-600 rounded">
                  <div class="font-medium text-gray-900 dark:text-white">{generatedAudio.speed}x</div>
                  <div class="text-gray-500 dark:text-gray-400">Speed</div>
                </div>
                <div class="p-2 bg-white dark:bg-gray-600 rounded">
                  <div class="font-medium text-gray-900 dark:text-white">{generatedAudio.pitch}x</div>
                  <div class="text-gray-500 dark:text-gray-400">Pitch</div>
                </div>
                <div class="p-2 bg-white dark:bg-gray-600 rounded">
                  <div class="font-medium text-gray-900 dark:text-white capitalize">{generatedAudio.emotion}</div>
                  <div class="text-gray-500 dark:text-gray-400">Emotion</div>
                </div>
                <div class="p-2 bg-white dark:bg-gray-600 rounded">
                  <div class="font-medium text-gray-900 dark:text-white">{getLanguageFlag(generatedAudio.language)}</div>
                  <div class="text-gray-500 dark:text-gray-400">Language</div>
                </div>
              </div>
            </div>
            
            <!-- Original Text -->
            <div class="mt-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
              <div class="flex items-start justify-between">
                <p class="text-sm text-gray-900 dark:text-white flex-1">{generatedAudio.text}</p>
                <button
                  type="button"
                  class="ml-2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                  on:click={() => copyText(generatedAudio.text)}
                >
                  <Copy class="w-4 h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      {/if}
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
      <!-- Custom Voice Upload -->
      <div class="card">
        <div class="card-header">
          <div class="flex items-center">
            <Users class="w-5 h-5 text-purple-500 mr-2" />
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Custom Voice</h3>
          </div>
        </div>
        <div class="card-body">
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
            Upload your own voice sample to create a personalized AI voice
          </p>
          
          <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center hover:border-primary-500 transition-colors">
            <input
              type="file"
              accept="audio/*"
              on:change={handleFileUpload}
              class="hidden"
              id="voice-upload"
            />
            <label for="voice-upload" class="cursor-pointer">
              <Upload class="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p class="text-sm text-gray-600 dark:text-gray-400">
                Click to upload voice sample
              </p>
              <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">
                MP3, WAV up to 10MB
              </p>
            </label>
          </div>
          
          {#if customVoiceFile}
            <div class="mt-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
              <div class="flex items-center">
                <FileAudio class="w-4 h-4 text-green-600 dark:text-green-400 mr-2" />
                <span class="text-sm text-green-800 dark:text-green-200">
                  {customVoiceFile.name}
                </span>
              </div>
            </div>
          {/if}
        </div>
      </div>

      <!-- Recent Audio -->
      <div class="card">
        <div class="card-header">
          <div class="flex items-center">
            <Clock class="w-5 h-5 text-blue-500 mr-2" />
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Recent Audio</h3>
          </div>
        </div>
        <div class="card-body">
          {#if audioHistory.length > 0}
            <div class="space-y-3">
              {#each audioHistory.slice(0, 5) as audio}
                <div class="p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors">
                  <div class="flex items-start justify-between mb-2">
                    <div class="flex-1">
                      <div class="flex items-center space-x-2 mb-1">
                        <span class="text-sm font-medium text-gray-900 dark:text-white">
                          {audio.voice_name}
                        </span>
                        <span class="text-xs text-gray-500 dark:text-gray-400">
                          {formatDuration(audio.duration)}
                        </span>
                      </div>
                      <p class="text-xs text-gray-600 dark:text-gray-300 line-clamp-2">
                        {audio.text}
                      </p>
                    </div>
                    <div class="flex items-center space-x-1 ml-2">
                      <button
                        type="button"
                        class="p-1 text-gray-400 hover:text-primary-600 dark:hover:text-primary-400"
                        on:click={() => playAudio(audio)}
                      >
                        <Play class="w-3 h-3" />
                      </button>
                      <button
                        type="button"
                        class="p-1 text-gray-400 hover:text-red-500 {audio.liked ? 'text-red-500' : ''}"
                        on:click={() => toggleLike(audio.id)}
                      >
                        <Heart class="w-3 h-3 {audio.liked ? 'fill-current' : ''}" />
                      </button>
                    </div>
                  </div>
                  
                  <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                    <span>{formatDate(audio.createdAt)}</span>
                    <span>{audio.downloads} downloads</span>
                  </div>
                </div>
              {/each}
            </div>
          {:else}
            <div class="text-center py-4">
              <Waveform class="w-8 h-8 text-gray-400 mx-auto mb-2" />
              <p class="text-sm text-gray-500 dark:text-gray-400">
                Your generated audio will appear here
              </p>
            </div>
          {/if}
        </div>
      </div>

      <!-- Tips -->
      <div class="card">
        <div class="card-header">
          <div class="flex items-center">
            <Volume2 class="w-5 h-5 text-yellow-500 mr-2" />
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Voice Tips</h3>
          </div>
        </div>
        <div class="card-body">
          <div class="space-y-3 text-sm">
            <div class="flex items-start space-x-2">
              <div class="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></div>
              <p class="text-gray-600 dark:text-gray-300">
                Use punctuation to control pacing and emphasis
              </p>
            </div>
            <div class="flex items-start space-x-2">
              <div class="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></div>
              <p class="text-gray-600 dark:text-gray-300">
                UPPERCASE text will be emphasized in speech
              </p>
            </div>
            <div class="flex items-start space-x-2">
              <div class="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></div>
              <p class="text-gray-600 dark:text-gray-300">
                Add pauses with "..." for dramatic effect
              </p>
            </div>
            <div class="flex items-start space-x-2">
              <div class="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></div>
              <p class="text-gray-600 dark:text-gray-300">
                Choose voice emotion that matches your content
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>