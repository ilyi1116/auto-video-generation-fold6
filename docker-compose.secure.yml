version: '3.8'

# 安全強化的 Docker Compose 配置
# 生產環境安全部署配置

services:
  # ===========================================
  # 前端服務 - 安全配置
  # ===========================================
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://api-gateway:8000
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8000}
    env_file:
      - ./config/environments/production.env
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 安全設定
    user: "1001:1001"  # 非 root 用戶
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/cache/nginx:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # API 閘道器 - 安全配置
  # ===========================================
  api-gateway:
    build:
      context: ./src/services/api-gateway
      dockerfile: Dockerfile.secure
      args:
        - USER_ID=1001
        - GROUP_ID=1001
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    volumes:
      - ./src/services/api-gateway/app:/app/app:ro
      - ${SSL_CERT_DIR:-./certs}:/app/certs:ro
      - ./logs:/app/logs:rw
    env_file:
      - ./config/environments/production.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # 安全設定
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /var/cache:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # 認證服務 - 安全配置
  # ===========================================
  auth-service:
    build:
      context: ./src/services/auth-service
      dockerfile: Dockerfile.secure
      args:
        - USER_ID=1001
        - GROUP_ID=1001
    ports:
      - "${AUTH_SERVICE_PORT:-8001}:8001"
    volumes:
      - ./src/services/auth-service/app:/app/app:ro
      - ./logs:/app/logs:rw
    env_file:
      - ./config/environments/production.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    # 安全設定
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # AI 服務 - 安全配置
  # ===========================================
  ai-service:
    build:
      context: ./src/services/ai-service
      dockerfile: Dockerfile.secure
      args:
        - USER_ID=1001
        - GROUP_ID=1001
    ports:
      - "${AI_SERVICE_PORT:-8005}:8005"
    volumes:
      - ./src/services/ai-service/app:/app/app:ro
      - ./logs:/app/logs:rw
      - ai_temp:/tmp
    env_file:
      - ./config/environments/production.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    # 安全設定
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /var/cache:noexec,nosuid,size=200m
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # 資料庫 - 安全配置
  # ===========================================
  postgres:
    image: postgres:15-alpine
    ports:
      - "127.0.0.1:${POSTGRES_PORT:-5432}:5432"  # 僅本地訪問
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      # 安全配置
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_PASSWORD_ENCRYPTION: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # 安全設定
    user: "999:999"  # postgres 用戶
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # Redis - 安全配置
  # ===========================================
  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:${REDIS_PORT:-6380}:6379"  # 僅本地訪問
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --bind 0.0.0.0
      --protected-mode yes
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    # 安全設定
    user: "999:999"  # redis 用戶
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # MinIO - 安全配置
  # ===========================================
  minio:
    image: minio/minio:latest
    ports:
      - "127.0.0.1:${MINIO_PORT:-9000}:9000"
      - "127.0.0.1:${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://localhost:9000}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_CONSOLE_URL:-http://localhost:9001}
      # 安全設定
      MINIO_SECURE_HEADERS: "on"
      MINIO_TLS_CERT_FILE: "/certs/tls.crt"
      MINIO_TLS_PRIVATE_KEY: "/certs/tls.key"
    volumes:
      - minio_data:/data
      - ${SSL_CERT_DIR:-./certs}:/certs:ro
    networks:
      - app-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 20s
    # 安全設定
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
      - NET_BIND_SERVICE
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # 監控 - 安全配置
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "127.0.0.1:${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - app-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    # 安全設定
    user: "nobody:nogroup"
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default

  # ===========================================
  # 統一資料庫遷移服務
  # ===========================================
  migrations:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        RUN groupadd -r appuser && useradd -r -g appuser appuser
        WORKDIR /app
        COPY pyproject.toml .
        COPY alembic.ini .
        COPY alembic/ ./alembic/
        COPY src/ ./src/
        COPY scripts/db-migration-manager.py ./scripts/
        RUN pip install --no-cache-dir -e .
        RUN pip install alembic asyncpg psycopg2-binary
        RUN chown -R appuser:appuser /app
        USER appuser
    env_file:
      - ./config/environments/production.env
    environment:
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: >
      sh -c "
        echo '🚀 開始統一資料庫遷移...' &&
        echo '⏳ 等待 PostgreSQL 完全啟動...' &&
        sleep 10 &&
        python scripts/db-migration-manager.py create-db &&
        python scripts/db-migration-manager.py init &&
        alembic upgrade head &&
        echo '✅ 資料庫遷移完成！'
      "
    restart: "no"
    # 安全設定
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true

# ===========================================
# 安全網路配置
# ===========================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"

# ===========================================
# 安全資料持久化
# ===========================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/minio
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/prometheus
  ai_temp:
    driver: tmpfs
    driver_opts:
      tmpfs-size: "500m"
      tmpfs-mode: "1777"

# ===========================================
# 安全配置說明
# ===========================================
# 1. 所有服務都使用非 root 用戶運行 (user: "1001:1001")
# 2. 移除所有不必要的 capabilities (cap_drop: ALL)
# 3. 僅添加必要的 capabilities (cap_add: minimal)
# 4. 啟用 read-only 檔案系統 (read_only: true)
# 5. 使用 tmpfs 處理臨時檔案 (tmpfs: noexec,nosuid)
# 6. 禁止提升權限 (no-new-privileges:true)
# 7. 使用 AppArmor 安全模組 (apparmor:docker-default)
# 8. 限制網路訪問 (僅本地綁定敏感服務)
# 9. 強制使用強密碼和加密連線
# 10. 限制資源使用和日誌輪轉
