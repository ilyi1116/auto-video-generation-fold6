version: '3.8'

# 統一部署配置 - 整合 Phase 2 資料庫系統
# Auto Video Generation System - Unified Deployment
services:
  # ===========================================
  # 前端服務
  # ===========================================
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - API_BASE_URL=http://api-gateway:8000
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8000}
    env_file:
      - .env
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # API 閘道器
  # ===========================================
  api-gateway:
    build:
      context: ./src/services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    volumes:
      - ./src/services/api-gateway/app:/app/app
      - ${SSL_CERT_DIR:-./certs}:/app/certs:ro
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # 微服務群組
  # ===========================================
  
  # 認證服務
  auth-service:
    build:
      context: ./src/services/auth-service
      dockerfile: Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT:-8001}:8001"
    volumes:
      - ./src/services/auth-service/app:/app/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # 趨勢分析服務
  trend-service:
    build:
      context: ./src/services/trend-service
      dockerfile: Dockerfile
    ports:
      - "${TREND_SERVICE_PORT:-8007}:8007"
    volumes:
      - ./src/services/trend-service/app:/app/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  # 儲存服務
  storage-service:
    build:
      context: ./src/services/storage-service
      dockerfile: Dockerfile
    ports:
      - "${STORAGE_SERVICE_PORT:-8009}:8009"
    volumes:
      - ./src/services/storage-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/3
      - S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  # 影片生成服務
  video-service:
    build:
      context: ./src/services/video-service
      dockerfile: Dockerfile
    ports:
      - "${VIDEO_SERVICE_PORT:-8004}:8004"
    volumes:
      - ./src/services/video-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/4
      - S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
      ai-service:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  # AI 整合服務
  ai-service:
    build:
      context: ./src/services/ai-service
      dockerfile: Dockerfile
    ports:
      - "${AI_SERVICE_PORT:-8005}:8005"
    volumes:
      - ./src/services/ai-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # 社群媒體服務
  social-service:
    build:
      context: ./src/services/social-service
      dockerfile: Dockerfile
    ports:
      - "${SOCIAL_SERVICE_PORT:-8006}:8006"
    volumes:
      - ./src/services/social-service/app:/app/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/6
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  # 排程服務
  scheduler-service:
    build:
      context: ./src/services/scheduler-service
      dockerfile: Dockerfile
    ports:
      - "${SCHEDULER_SERVICE_PORT:-8008}:8008"
    volumes:
      - ./src/services/scheduler-service/app:/app/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/7
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  # ===========================================
  # 非同步任務處理器
  # ===========================================
  
  # Celery Worker - 資料處理
  celery-worker-data:
    build:
      context: ./src/services/data-service
      dockerfile: Dockerfile
    volumes:
      - ./src/services/data-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/8
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    command: celery -A app.celery_app worker --loglevel=info --queues=data_processing
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # Celery Worker - 影片生成
  celery-worker-video:
    build:
      context: ./src/services/video-service
      dockerfile: Dockerfile
    volumes:
      - ./src/services/video-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/9
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      ai-service:
        condition: service_started
    networks:
      - app-network
    command: celery -A app.celery_app worker --loglevel=info --queues=video_generation
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # Celery Worker - AI 任務
  celery-worker-ai:
    build:
      context: ./src/services/ai-service
      dockerfile: Dockerfile
    volumes:
      - ./src/services/ai-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: celery -A app.celery_app worker --loglevel=info --queues=ai_tasks
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  # Celery Beat 排程器
  celery-beat:
    build:
      context: ./src/services/scheduler-service
      dockerfile: Dockerfile
    volumes:
      - ./src/services/scheduler-service/app:/app/app
      - celery_beat_data:/app/celerybeat-schedule
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - REDIS_URL=redis://redis:6379/11
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    command: celery -A app.celery_app beat --loglevel=info
    restart: unless-stopped

  # ===========================================
  # 資料庫與快取
  # ===========================================
  
  # PostgreSQL 主資料庫
  postgres:
    image: postgres:15-alpine
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-auto_video_generation}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./auto_generate_video_fold6.old/database/seeds:/docker-entrypoint-initdb.d/seeds:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis 快取與訊息佇列
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-512mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./auto_generate_video_fold6.old/config/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # MinIO S3 相容儲存
  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-minioadmin123}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://localhost:9000}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_CONSOLE_URL:-http://localhost:9001}
    volumes:
      - minio_data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 20s

  # ===========================================
  # 資料庫遷移與初始化
  # ===========================================
  
  # 統一資料庫遷移服務 (Phase 2)
  migrations:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        COPY pyproject.toml .
        COPY alembic.ini .
        COPY alembic/ ./alembic/
        COPY src/ ./src/
        COPY auto_generate_video_fold6.old/database/ ./auto_generate_video_fold6/database/
        COPY scripts/db-migration-manager.py ./scripts/
        RUN pip install --no-cache-dir -e .
        RUN pip install alembic asyncpg psycopg2-binary
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: >
      sh -c "
        echo '🚀 開始統一資料庫遷移...' &&
        echo '⏳ 等待 PostgreSQL 完全啟動...' &&
        sleep 10 &&
        python scripts/db-migration-manager.py create-db &&
        python scripts/db-migration-manager.py init &&
        alembic upgrade head &&
        echo '✅ 資料庫遷移完成！'
      "
    restart: "no"

  # 資料庫健康檢查與同步
  db-sync-manager:
    build:
      context: .
      dockerfile_inline: |
        FROM python:3.11-slim
        WORKDIR /app
        COPY pyproject.toml .
        COPY src/ ./src/
        COPY auto_generate_video_fold6.old/database/ ./auto_generate_video_fold6/database/
        RUN pip install --no-cache-dir -e .
        RUN pip install asyncpg psycopg2-binary
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-auto_video_generation}
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
    command: python -m auto_generate_video_fold6.database.sync_manager
    restart: "no"
    profiles:
      - tools

  # ===========================================
  # 監控與日誌
  # ===========================================
  
  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./auto_generate_video_fold6.old/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./auto_generate_video_fold6.old/monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

# ===========================================
# 網路配置
# ===========================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# 資料持久化
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  celery_beat_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local