[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "auto-video-generation"
version = "0.1.0"
description = "Auto Video Generation System with AI Voice Cloning and Social Media Publishing"
authors = [{name = "Auto Video Team", email = "team@autovideo.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# 包發現配置
[tool.setuptools.packages.find]
where = ["."]
include = ["auto_generate_video_fold6*"]
exclude = ["tests*", "*.tests*", "*.tests.*", "tests.*"]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "grpcio>=1.59.0",
    "grpcio-tools>=1.59.0",
    "structlog>=23.2.0",
    "boto3>=1.29.0",
    "librosa>=0.10.0",
    "numpy>=1.24.0",
    "torch>=2.1.0",
    "torchaudio>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "black>=23.9.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "bandit>=1.7.5",
    "pre-commit>=3.4.0",
    "coverage>=7.3.0",
    "ruff>=0.1.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",
    "faker>=19.12.0",
    "coverage>=7.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-swagger-ui-tag>=0.6.0",
]

# E2E 測試依賴 (來自 requirements-e2e.txt)
e2e = [
    "aiohttp>=3.10.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "requests>=2.32.0",
]

# 報告和分析依賴 (來自 requirements-reporting.txt)
reporting = [
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
    "dash>=2.16.0",
    "dash-bootstrap-components>=1.5.0",
    "jinja2>=3.1.0",
    "reportlab>=4.0.0",
    "weasyprint>=60.0.0",
    "openpyxl>=3.1.0",
    "xlsxwriter>=3.1.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "statsmodels>=0.14.0",
    "Pillow>=10.1.0",
    "aiofiles>=23.2.0",
]

[tool.black]
line-length = 79
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=auto_generate_video_fold6",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["auto_generate_video_fold6/tests", "auto_generate_video_fold6/services/*/tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["auto_generate_video_fold6/"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/alembic/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

# Bandit 安全性檢查配置
[tool.bandit]
exclude_dirs = ["tests", "auto_generate_video_fold6/frontend"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]

# Ruff 現代 Python 檢查工具配置
[tool.ruff]
target-version = "py311"
line-length = 79
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "auto_generate_video_fold6/frontend",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"auto_generate_video_fold6/services/*/tests/*" = ["B011", "B018"]

[tool.ruff.lint.mccabe]
max-complexity = 10

# Flake8 配置
[tool.flake8]
max-line-length = 79
extend-ignore = ["E203", "W503", "E501", "E302", "W391"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "auto_generate_video_fold6/frontend",
    "node_modules",
    "*.egg-info",
    ".tox",
    ".mypy_cache",
    ".pytest_cache"
]
per-file-ignores = [
    "__init__.py:F401",
    "test_*.py:B011,B018",
    "*_test.py:B011,B018"
]