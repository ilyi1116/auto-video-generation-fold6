
# Auto Video Generation System - 主要 CI/CD 流水線
# 整合 Phase 2 資料庫系統和 Phase 3 部署策略

name: 🚀 CI/CD Main Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  # 缓存优化配置
  CACHE_FROM: type=gha
  CACHE_TO: type=gha,mode=max
  # 构建优化
  BUILDKIT_INLINE_CACHE: 1
  DOCKER_BUILDKIT: 1

# 全域權限設定
permissions:
  security-events: write
  actions: read
  contents: read
  pull-requests: read

jobs:
  # ===========================================
  # 程式碼品質檢查
  # ===========================================
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Detect Changes
      id: changes
      uses: dorny/paths-filter@v2
      with:
        filters: |
          backend:
            - 'src/services/**'
            - 'src/shared/**'
            - 'src/config/**'
            - 'scripts/**'
            - 'pyproject.toml'
            - 'alembic/**'
            - 'alembic.ini'
          frontend:
            - 'src/frontend/**'
            - 'src/frontend/package*.json'
          docker:
            - 'docker-compose*.yml'
            - '**/Dockerfile*'
            - 'infra/docker/**'
          k8s:
            - 'k8s/**'
            - 'infra/k8s/**'
          should-deploy:
            - 'src/**'
            - 'infra/**'
            - 'docker-compose*.yml'
            - 'k8s/**'

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: 🧹 Python Code Formatting (Black)
      run: |
        black --check --diff src/ scripts/ --line-length 79

    - name: 🔍 Python Linting (Flake8)
      run: |
        flake8 src/ scripts/ --max-line-length=79 --ignore=E203,W503,E501,E302,W391

    - name: 🔒 Python Security Check (Bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium --confidence-level high

    - name: 🧪 Python Type Checking (MyPy)
      run: |
        mypy src/ --ignore-missing-imports --show-error-codes

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Frontend Dependencies
      working-directory: src/frontend
      run: npm install --legacy-peer-deps

    - name: 🧹 Frontend Code Formatting (Prettier)
      working-directory: src/frontend
      run: npm run format

    - name: 🔍 Frontend Linting (ESLint)
      working-directory: src/frontend
      run: npm run lint

    - name: 🧪 Frontend Type Checking
      working-directory: src/frontend
      run: npm run check

  # ===========================================
  # 安全性掃描
  # ===========================================
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    # 只在主倉庫或非 fork PR 時執行
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    # CodeQL 初始化
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript
        queries: security-extended,security-and-quality

    # 構建專案以支援 CodeQL 分析
    - name: 🐍 Setup Python for CodeQL
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Python Dependencies for CodeQL
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: 🟢 Setup Node.js for CodeQL
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Frontend Dependencies for CodeQL
      working-directory: src/frontend
      run: npm ci --legacy-peer-deps

    # 執行 CodeQL 分析
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # Snyk 安全掃描
    - name: 🔍 Run Snyk Security Scan
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=pyproject.toml --sarif-file-output=snyk.sarif

    - name: 📊 Upload Snyk Results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('snyk.sarif') != ''
      with:
        sarif_file: snyk.sarif

    # Safety 安全掃描 (Python 依賴)
    - name: 🔍 Python Dependencies Security Scan (Safety)
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        echo "Python dependencies security scan completed"
    
    # Semgrep 静态安全分析
    - name: 🔍 Static Security Analysis (Semgrep)
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/python
          p/javascript
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true
    
    # 容器镜像安全扫描 (如果有構建的镜像)
    - name: 🐳 Container Security Scan
      if: always()
      run: |
        # 扫描基础镜像的安全漏洞
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/path aquasec/trivy:latest image --format sarif \
          --output container-scan-results.sarif \
          python:3.11-slim || true

    # Trivy 容器掃描
    - name: 🐳 Run Trivy Container Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy Results to GitHub
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'

  # ===========================================
  # 單元測試與整合測試
  # ===========================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-deploy == 'true' && (inputs.skip_tests != true)

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_auto_video_generation
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: 🗄️ Setup Test Database
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auto_video_generation
        REDIS_URL: redis://localhost:6379/0
      run: |
        # 執行 Phase 2 資料庫遷移
        python scripts/db-migration-manager.py create-db --env=test
        alembic upgrade head

    - name: 🧪 Run Unit Tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_auto_video_generation
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        pytest src/services/*/tests tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-deploy == 'true' && (inputs.skip_tests != true)

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/frontend/package-lock.json'

    - name: 📦 Install Dependencies
      working-directory: src/frontend
      run: npm ci

    - name: 🏗️ Build Frontend
      working-directory: src/frontend
      run: npm run build

    - name: 🧪 Run Unit Tests
      working-directory: src/frontend
      run: npm run test:coverage

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./src/frontend/coverage
        flags: frontend
        name: frontend-coverage

  # ===========================================
  # E2E 整合測試
  # ===========================================
  e2e-tests:
    name: 🔄 E2E Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: needs.code-quality.outputs.should-deploy == 'true' && (inputs.skip_tests != true)

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Build and Start Services
      run: |
        cp .env.template .env
        docker-compose -f docker-compose.unified.yml up -d postgres redis minio
        
        # 等待服務準備完成
        timeout 60 bash -c 'until docker-compose -f docker-compose.unified.yml exec -T postgres pg_isready -U postgres; do sleep 2; done'
        
        # 執行資料庫遷移
        docker-compose -f docker-compose.unified.yml up migrations
        
        # 啟動應用服務
        docker-compose -f docker-compose.unified.yml up -d

    - name: 🧪 Run E2E Tests
      run: |
        # 等待服務完全啟動
        sleep 30
        
        # 檢查服務健康狀態
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:3000/ || exit 1
        
        # 執行 E2E 測試 (如果有的話)
        if [ -f "tests/e2e/run_tests.py" ]; then
          python tests/e2e/run_tests.py
        fi

    - name: 📋 Collect Service Logs
      if: failure()
      run: |
        docker-compose -f docker-compose.unified.yml logs > e2e-logs.txt

    - name: 📤 Upload E2E Artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-failure-logs
        path: |
          e2e-results/
          playwright-report/
        retention-days: 7

  # ===========================================
  # 发现微服务并准备构建
  # ===========================================
  discover-services:
    name: 🔍 Discover Microservices
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.should-deploy == 'true'
    outputs:
      services: ${{ steps.services.outputs.services }}
      has-frontend: ${{ steps.frontend.outputs.has-frontend }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Discover Services
      id: discover-services
      run: |
        # 發現所有有 Dockerfile 的服務
        services=$(find src/services -name Dockerfile -exec dirname {} \; | sed 's|src/services/||' | sort | jq -R -s -c 'split("\n")[:-1]')
        echo "services=$services" >> $GITHUB_OUTPUT
        echo "Discovered services: $services"
    
    - name: 🌐 Check Frontend Changes
      id: frontend
      run: |
        if [ -f "src/frontend/Dockerfile" ]; then
          echo "has-frontend=true" >> $GITHUB_OUTPUT
        else
          echo "has-frontend=false" >> $GITHUB_OUTPUT
        fi

  # ===========================================
  # 微服务容器映像构建
  # ===========================================
  build-microservices:
    name: 🐳 Build Microservice Images
    runs-on: ubuntu-latest
    needs: [backend-tests, discover-services]
    if: needs.code-quality.outputs.should-deploy == 'true' && needs.discover-services.outputs.services != '[]'
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=${{ matrix.service }}
          org.opencontainers.image.description=Auto Video Generation - ${{ matrix.service }}

    - name: 🔍 Check if Dockerfile exists
      id: check-dockerfile
      run: |
        if [ -f "./src/services/${{ matrix.service }}/Dockerfile" ]; then
          echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: 🐳 Build Docker Image
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ./src/services/${{ matrix.service }}
        file: ./src/services/${{ matrix.service }}/Dockerfile
        push: false
        tags: ${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🐳 Build Docker Image (Alternative Path)
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'false'
      uses: docker/build-push-action@v5
      with:
        context: ./src/services/${{ matrix.service }}
        file: ./src/services/${{ matrix.service }}/Dockerfile
        push: false
        tags: ${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===========================================
  # 前端容器映像构建
  # ===========================================
  build-frontend:
    name: 🌐 Build Frontend Image
    runs-on: ubuntu-latest
    needs: [frontend-tests, discover-services]
    if: needs.code-quality.outputs.should-deploy == 'true' && needs.discover-services.outputs.has-frontend == 'true'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=frontend
          org.opencontainers.image.description=Auto Video Generation - Frontend

    - name: 🏗️ Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./src/frontend
        file: ./src/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend
        platforms: linux/amd64,linux/arm64
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # ===========================================
  # 自動部署
  # ===========================================
  deploy:
    name: 🚀 Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build-microservices, build-frontend, e2e-tests]
    if: |
      needs.code-quality.outputs.should-deploy == 'true' && (
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
        github.event_name == 'workflow_dispatch'
      )

    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🎯 Determine Environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=development" >> $GITHUB_OUTPUT
        fi

    - name: 🔧 Setup Environment Configuration
      run: |
        cp .env.template .env
        # 根據環境設定對應的環境變數
        sed -i "s/ENVIRONMENT=development/ENVIRONMENT=${{ steps.env.outputs.environment }}/g" .env

    - name: 🐳 Deploy with Docker Compose
      if: steps.env.outputs.environment != 'production'
      run: |
        chmod +x scripts/deploy-unified.sh
        ./scripts/deploy-unified.sh docker ${{ steps.env.outputs.environment }}

    - name: ☸️ Deploy to Kubernetes
      if: steps.env.outputs.environment == 'production'
      run: |
        # 設置 kubectl 配置 (需要在 GitHub Secrets 中設定)
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        
        # 更新映像標籤
        export IMAGE_TAG="${{ github.sha }}"
        envsubst < k8s/unified-deployment.yaml | kubectl apply -f -
        
        # 等待部署完成
        kubectl rollout status deployment/api-gateway -n auto-video-generation
        kubectl rollout status deployment/auth-service -n auto-video-generation
        kubectl rollout status deployment/video-service -n auto-video-generation

    - name: 🔍 Comprehensive Health Check
      id: health-check
      run: |
        sleep 30
        
        # 定義健康檢查函數
        check_service_health() {
          local service_url=$1
          local service_name=$2
          local max_retries=10
          local retry_interval=15
          
          echo "Checking health for $service_name at $service_url"
          
          for i in $(seq 1 $max_retries); do
            if curl -f --connect-timeout 10 --max-time 30 "$service_url"; then
              echo "✅ $service_name is healthy"
              return 0
            else
              echo "⏰ Attempt $i/$max_retries failed for $service_name, waiting $retry_interval seconds..."
              sleep $retry_interval
            fi
          done
          
          echo "❌ $service_name health check failed after $max_retries attempts"
          return 1
        }
        
        # 根據環境執行健康檢查
        if [ "${{ steps.env.outputs.environment }}" = "production" ]; then
          echo "🏭 Production environment health checks"
          
          # Kubernetes 健康檢查
          kubectl get pods -n auto-video-generation
          kubectl get services -n auto-video-generation
          
          # 等待所有 pods 就緒
          kubectl wait --for=condition=ready pod -l app=api-gateway -n auto-video-generation --timeout=300s
          kubectl wait --for=condition=ready pod -l app=auth-service -n auto-video-generation --timeout=300s
          
          # API 健康檢查 (需要根據實際域名配置)
          # check_service_health "https://api.yourdomain.com/health" "API Gateway"
          # check_service_health "https://auth.yourdomain.com/health" "Auth Service"
          
        else
          echo "🧪 Development/Staging environment health checks"
          
          # 檢查本地部署的服務
          failed_services=()
          
          # 核心服務健康檢查
          if ! check_service_health "http://localhost:8000/health" "API Gateway"; then
            failed_services+=("API Gateway")
          fi
          
          if ! check_service_health "http://localhost:8001/health" "Auth Service"; then
            failed_services+=("Auth Service")
          fi
          
          if ! check_service_health "http://localhost:3000/" "Frontend"; then
            failed_services+=("Frontend")
          fi
          
          # 檢查是否有失敗的服務
          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "❌ The following services failed health checks: ${failed_services[*]}"
            echo "health-check-passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ All services passed health checks"
            echo "health-check-passed=true" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: 🔄 Rollback on Health Check Failure
      if: failure() && steps.health-check.outputs.health-check-passed == 'false'
      run: |
        echo "🚨 Health check failed, initiating rollback..."
        
        if [ "${{ steps.env.outputs.environment }}" = "production" ]; then
          # Kubernetes 回滾
          kubectl rollout undo deployment/api-gateway -n auto-video-generation
          kubectl rollout undo deployment/auth-service -n auto-video-generation
          kubectl rollout undo deployment/video-service -n auto-video-generation
          echo "📋 Kubernetes rollback initiated"
        else
          # Docker Compose 回滾
          echo "📋 Docker Compose rollback - stopping current deployment"
          docker-compose -f docker-compose.unified.yml down
          
          # 這裡可以實現版本回滾邏輯
          # 例如：docker-compose -f docker-compose.unified.yml up -d --scale api-gateway=0
          echo "📋 Previous version restore would be initiated here"
        fi

  # ===========================================
  # 部署通知
  # ===========================================
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
    - name: 📢 Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 部署成功完成！"
        echo "環境: ${{ needs.deploy.outputs.environment || 'staging' }}"
        echo "提交: ${{ github.sha }}"
        echo "分支: ${{ github.ref_name }}"

    - name: ❌ Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ 部署失敗！"
        echo "請檢查部署日誌並進行故障排除"
        exit 1