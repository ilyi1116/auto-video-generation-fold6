name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build staging images
        run: |
          # Create staging environment file
          cp .env.example .env
          
          # Build images with staging tag
          docker-compose -f docker-compose.yml build
          
          # Tag images for staging (using proper image names)
          COMPOSE_PROJECT_NAME=$(basename $PWD | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g')
          
          for service in api-gateway auth-service data-service inference-service video-service; do
            if docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "${COMPOSE_PROJECT_NAME}[-_]${service}"; then
              IMAGE_NAME=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${COMPOSE_PROJECT_NAME}[-_]${service}" | head -1)
              docker tag "$IMAGE_NAME" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:staging
              echo "Tagged ${service} for staging"
            else
              echo "Skipping ${service} - image not found"
            fi
          done

      - name: Push staging images
        run: |
          # Push all tagged staging images
          for service in api-gateway auth-service data-service inference-service video-service; do
            if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:staging"; then
              docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:staging
              echo "Pushed ${service}:staging"
            else
              echo "Skipping ${service} - staging image not found"
            fi
          done

      - name: Deploy to staging server
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # This would typically use SSH to deploy to staging server
          # or use cloud provider's deployment tools
          
      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests on staging..."
          sleep 10
          # curl -f https://staging.yourdomain.com/health
          
      - name: Notify team
        if: always()
        run: |
          echo "ðŸ“¢ Staging deployment ${{ job.status }}"