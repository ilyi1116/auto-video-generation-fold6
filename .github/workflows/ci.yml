name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy

      - name: Format check with Black
        run: black --check --diff services/

      - name: Lint with flake8
        run: flake8 services/

      - name: Import sorting check
        run: isort --check-only --diff services/

      - name: Type checking with mypy
        run: mypy services/ --ignore-missing-imports
        continue-on-error: true

  # Security Scanning
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --sarif-file-output=snyk.sarif

      - name: Upload Snyk results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Unit Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install from unified pyproject.toml
          pip install -e .
          pip install -e ".[test,dev]"

      - name: Run tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-testing-only
          SUNO_API_KEY: test-suno-key
          GEMINI_API_KEY: test-gemini-key
          STABLE_DIFFUSION_API_KEY: test-sd-key
        run: |
          # Run auth service tests
          if [ -d services/auth-service/tests ]; then
            cd services/auth-service
            pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing || true
            cd ../..
          fi
          
          # Run video service tests  
          if [ -d services/video-service/tests ]; then
            cd services/video-service
            pytest tests/ --cov=. --cov-report=xml --cov-report=term-missing || true
            cd ../..
          fi
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./services/auth-service/coverage.xml
          flags: auth-service

  # Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [api-gateway, auth-service, data-service, inference-service, video-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Check if service has Dockerfile
        id: check_dockerfile
        run: |
          if [ -f "./services/${{ matrix.service }}/Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./services/${{ matrix.service }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/${{ matrix.service }}.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/${{ matrix.service }}.tar
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true' && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Push Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: Integration Tests
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: cp .env.template .env

      - name: Start services
        run: |
          docker-compose up -d --build
          sleep 30

      - name: Health check
        run: |
          curl -f http://localhost:8000/health
          curl -f http://localhost:8001/health

      - name: Run integration tests
        run: |
          # Test user registration
          curl -X POST http://localhost:8000/api/v1/auth/register \
            -H "Content-Type: application/json" \
            -d '{"email":"test@example.com","username":"testuser","password":"testpass123"}' \
            --fail
          
          echo "Integration tests passed!"

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Deployment (placeholder)
  deploy:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Deploy notification
        run: |
          echo "Deployment step - to be implemented"
          echo "Image tags built and pushed successfully"