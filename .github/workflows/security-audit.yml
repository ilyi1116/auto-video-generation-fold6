name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    paths:
      - '**/requirements.txt'
      - '**/package.json'
      - '**/Dockerfile'

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: pip install safety

      - name: Run Safety check on all requirements
        run: |
          find services -name "requirements.txt" -exec safety check -r {} \;
        continue-on-error: true

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r services/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, data-service, inference-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:latest ./services/${{ matrix.service }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Check licenses in services
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Checking licenses for $service"
              cd "$service"
              pip install -r requirements.txt
              pip-licenses --format=json --output-file="../$(basename $service)-licenses.json"
              cd - > /dev/null
            fi
          done

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: "*-licenses.json"