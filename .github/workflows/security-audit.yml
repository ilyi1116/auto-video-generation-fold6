name: Security Audit

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  workflow_dispatch:
  push:
    paths:
      - '**/requirements.txt'
      - '**/package.json'
      - '**/Dockerfile'

# 全域權限設定
permissions:
  security-events: write
  actions: read
  contents: read
  pull-requests: read

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install safety
        run: pip install safety

      - name: Run Safety check on all requirements
        run: |
          # Find and check all requirements.txt files
          for req_file in $(find src/services -name "requirements.txt"); do
            echo "Checking $req_file"
            safety check -r "$req_file" || echo "Safety check failed for $req_file"
          done
        continue-on-error: true

      - name: 🔍 Python Security Check (Bandit)
        run: |
          bandit -r src/services/ -f json -o bandit-report.json
          bandit -r src/services/ --severity-level medium --confidence-level high

      - name: 🔍 Docker Security Scan
        run: |
          # 掃描所有服務的 Dockerfile
          for service in src/services/*/; do
            if [ -f "$service/Dockerfile" ]; then
              echo "Scanning $service"
              docker run --rm -v "$(pwd)/$service:/app" aquasec/trivy config /app
            fi
          done

      - name: 🐳 Build and Scan Docker Images
        run: |
          # 構建並掃描 Docker 映像
          for service in src/services/*/; do
            if [ -f "$service/Dockerfile" ]; then
              service_name=$(basename "$service")
              echo "Building and scanning $service_name"
              docker build -t $service_name:latest ./src/services/$service_name
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image $service_name:latest
            fi
          done

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

      - name: Upload Docker security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-security-reports
          path: |
            trivy-results-*.sarif
          retention-days: 30

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Check licenses in services
        run: |
          for service in src/services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Checking licenses for $service"
              cd "$service"
              pip install -r requirements.txt
              pip-licenses --format=json --output-file="../$(basename $service)-licenses.json"
              cd - > /dev/null
            fi
          done

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: "*-licenses.json"