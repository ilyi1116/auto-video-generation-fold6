version: '3.8'

services:
  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://api-gateway:8000
      - PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./services/api-gateway/app:/app/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - auth-service
      - data-service
    networks:
      - app-network
    restart: unless-stopped

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./services/auth-service/app:/app/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Data Service
  data-service:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./services/data-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - app-network
    restart: unless-stopped
  
  # Celery Worker for Data Processing
  celery-worker:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile
    volumes:
      - ./services/data-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - app-network
    command: celery -A app.celery_app worker --loglevel=info
    restart: unless-stopped

  # Celery Worker for Video Processing
  video-worker:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    volumes:
      - ./services/video-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - minio
      - ai-service
    networks:
      - app-network
    command: celery -A app.celery_app worker --loglevel=info --queues=video_generation
    restart: unless-stopped

  # Celery Worker for AI Tasks
  ai-worker:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    volumes:
      - ./services/ai-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    command: celery -A app.celery_app worker --loglevel=info --queues=ai_tasks
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./services/scheduler-service
      dockerfile: Dockerfile
    volumes:
      - ./services/scheduler-service/app:/app/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    command: celery -A app.celery_app beat --loglevel=info
    restart: unless-stopped

  # Inference Service (Legacy - to be phased out)
  inference-service:
    build:
      context: ./services/inference-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    volumes:
      - ./services/inference-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - app-network
    restart: unless-stopped

  # Video Generation Service
  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    volumes:
      - ./services/video-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
      - minio
      - ai-service
    networks:
      - app-network
    restart: unless-stopped

  # AI Integration Service
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    volumes:
      - ./services/ai-service/app:/app/app
      - /tmp:/tmp
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Social Platform Service
  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    volumes:
      - ./services/social-service/app:/app/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Trending Analysis Service
  trend-service:
    build:
      context: ./services/trend-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    volumes:
      - ./services/trend-service/app:/app/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Scheduler Service
  scheduler-service:
    build:
      context: ./services/scheduler-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    volumes:
      - ./services/scheduler-service/app:/app/app
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./scripts/video_schema.sql:/docker-entrypoint-initdb.d/02-video-schema.sql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - minio_data:/data
    networks:
      - app-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Database Migrations (runs once)
  migrations:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    networks:
      - app-network
    command: >
      sh -c "
        echo 'Waiting for postgres...' &&
        while ! nc -z postgres 5432; do sleep 1; done &&
        echo 'PostgreSQL started' &&
        python -c 'from app.database import engine; from app.models import Base; Base.metadata.create_all(bind=engine)' &&
        echo 'Database tables created successfully'
      "
    restart: "no"

networks:
  app-network:
    driver: bridge

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - app-network
    restart: unless-stopped

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Postgres Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # Docker cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: false
    networks:
      - app-network
    restart: unless-stopped

  # ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=video-generation-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx512m -Xms512m"
    depends_on:
      - elasticsearch
    networks:
      - app-network
    restart: unless-stopped

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Fluentd
  fluentd:
    build:
      context: ./monitoring/fluentd
      dockerfile: Dockerfile
    container_name: fluentd
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    volumes:
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf
      - /var/log:/var/log:ro
    environment:
      - FLUENTD_CONF=fluent.conf
    depends_on:
      - elasticsearch
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  elasticsearch_data: