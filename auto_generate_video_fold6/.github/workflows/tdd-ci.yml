# TDD CI/CD 管道
# 專為 Test-Driven Development 工作流程設計的持續整合管道

name: TDD CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/*, red/*, green/*, refactor/* ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  # TDD 環境變數
  TDD_COVERAGE_THRESHOLD: 90
  TDD_COMPLEXITY_LIMIT: 10
  TDD_TEST_TIMEOUT: 600

jobs:
  # TDD 流程檢查
  tdd-validation:
    name: TDD Flow Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 需要比較前一個提交
      
      - name: Validate TDD commit message
        run: |
          echo "🧬 驗證 TDD 提交訊息格式..."
          
          # 取得最新提交訊息
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "提交訊息: $COMMIT_MSG"
          
          # 檢查 TDD 前綴
          if [[ "$COMMIT_MSG" =~ ^(red|green|refactor|test|feat|fix|docs):.* ]]; then
            echo "✅ TDD 提交訊息格式正確"
            
            # 根據不同前綴設定後續檢查
            if [[ "$COMMIT_MSG" =~ ^red:.* ]]; then
              echo "RED_PHASE=true" >> $GITHUB_ENV
              echo "📍 RED 階段提交 - 預期會有失敗測試"
            elif [[ "$COMMIT_MSG" =~ ^green:.* ]]; then
              echo "GREEN_PHASE=true" >> $GITHUB_ENV
              echo "📍 GREEN 階段提交 - 所有測試應該通過"
            elif [[ "$COMMIT_MSG" =~ ^refactor:.* ]]; then
              echo "REFACTOR_PHASE=true" >> $GITHUB_ENV
              echo "📍 REFACTOR 階段提交 - 功能不變，改善程式碼結構"
            fi
          else
            echo "⚠️ 提交訊息不符合 TDD 格式，但允許繼續"
            echo "建議使用: red:, green:, refactor:, test:, feat:, fix:, docs: 前綴"
          fi
      
      - name: Analyze changed files
        run: |
          echo "🔍 分析異動檔案..."
          
          # 檢查異動的檔案類型
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD || echo "")
          echo "異動檔案:"
          echo "$CHANGED_FILES"
          
          # 分析檔案類型
          TEST_FILES=$(echo "$CHANGED_FILES" | grep -E "\.(test|spec)\.(js|ts|py)$" || echo "")
          SOURCE_FILES=$(echo "$CHANGED_FILES" | grep -E "\.(js|ts|py|svelte)$" | grep -v -E "\.(test|spec)\." || echo "")
          
          echo "測試檔案: $TEST_FILES"
          echo "原始碼檔案: $SOURCE_FILES"
          
          # 設定環境變數供後續步驟使用
          echo "TEST_FILES<<EOF" >> $GITHUB_ENV
          echo "$TEST_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "SOURCE_FILES<<EOF" >> $GITHUB_ENV
          echo "$SOURCE_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: TDD phase validation
        run: |
          echo "🧪 TDD 階段驗證..."
          
          if [ "$RED_PHASE" = "true" ]; then
            echo "RED 階段檢查:"
            echo "- 應該主要修改測試檔案"
            echo "- 可能會有失敗的測試"
            
            if [ -n "$TEST_FILES" ]; then
              echo "✅ 發現測試檔案異動，符合 RED 階段"
            else
              echo "⚠️ RED 階段但未發現測試檔案異動"
            fi
            
          elif [ "$GREEN_PHASE" = "true" ]; then
            echo "GREEN 階段檢查:"
            echo "- 應該主要修改原始碼"
            echo "- 所有測試必須通過"
            echo "REQUIRE_ALL_TESTS_PASS=true" >> $GITHUB_ENV
            
          elif [ "$REFACTOR_PHASE" = "true" ]; then
            echo "REFACTOR 階段檢查:"
            echo "- 只應修改原始碼，不應修改測試"
            echo "- 所有測試必須通過"
            echo "- 測試覆蓋率不應下降"
            echo "REQUIRE_ALL_TESTS_PASS=true" >> $GITHUB_ENV
            echo "CHECK_COVERAGE_REGRESSION=true" >> $GITHUB_ENV
            
            if [ -n "$TEST_FILES" ]; then
              echo "⚠️ REFACTOR 階段不應修改測試檔案"
            fi
          fi

  # 前端 TDD 測試
  frontend-tdd-tests:
    name: Frontend TDD Tests
    runs-on: ubuntu-latest
    needs: tdd-validation
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run TDD test suite
        run: |
          cd frontend
          echo "🧪 執行前端 TDD 測試套件..."
          
          # 1. 單元測試
          echo "📋 1. 執行單元測試..."
          npm run test:unit || TEST_FAILED=true
          
          # 2. 組件測試  
          echo "📋 2. 執行組件測試..."
          npm run test:component || TEST_FAILED=true
          
          # 3. 測試覆蓋率檢查
          echo "📋 3. 檢查測試覆蓋率..."
          npm run test:coverage || COVERAGE_FAILED=true
          
          # 4. 整合測試
          echo "📋 4. 執行整合測試..."
          npm run test:integration || INTEGRATION_FAILED=true
          
          # 結果處理
          if [ "$TEST_FAILED" = "true" ] && [ "$RED_PHASE" != "true" ]; then
            echo "❌ 測試失敗且非 RED 階段"
            exit 1
          elif [ "$TEST_FAILED" = "true" ] && [ "$RED_PHASE" = "true" ]; then
            echo "✅ RED 階段允許測試失敗"
          fi
          
          if [ "$COVERAGE_FAILED" = "true" ]; then
            echo "❌ 測試覆蓋率未達 $TDD_COVERAGE_THRESHOLD% TDD 標準"
            exit 1
          fi
          
          echo "✅ 前端 TDD 測試完成"
        
        env:
          CI: true
          NODE_ENV: test
      
      - name: Upload frontend coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

  # 後端 TDD 測試
  backend-tdd-tests:
    name: Backend TDD Tests
    runs-on: ubuntu-latest
    needs: tdd-validation
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        service: [auth-service, data-service, ai-service, video-service]
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          python -m pip install --upgrade pip
          
          # 安裝依賴
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          else
            # 安裝基本測試依賴
            pip install pytest pytest-cov pytest-asyncio pytest-mock factory-boy
          fi
      
      - name: Run TDD test suite
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-for-tdd-testing
          ENVIRONMENT: testing
          TDD_MODE: true
        run: |
          cd services/${{ matrix.service }}
          echo "🧪 執行後端 TDD 測試套件 - ${{ matrix.service }}..."
          
          # 檢查測試檔案是否存在
          if [ ! -d tests ] && [ ! -f test_*.py ] && [ ! -f *_test.py ]; then
            echo "⚠️ 未找到測試檔案，跳過 ${{ matrix.service }}"
            exit 0
          fi
          
          # 1. 單元測試
          echo "📋 1. 執行單元測試..."
          python -m pytest tests/unit/ -v --tb=short || UNIT_FAILED=true
          
          # 2. 整合測試
          echo "📋 2. 執行整合測試..."
          python -m pytest tests/integration/ -v --tb=short || INTEGRATION_FAILED=true
          
          # 3. 測試覆蓋率檢查（TDD 標準：90%）
          echo "📋 3. 檢查測試覆蓋率..."
          python -m pytest tests/ \
            --cov=app \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-fail-under=$TDD_COVERAGE_THRESHOLD \
            || COVERAGE_FAILED=true
          
          # 4. 程式碼品質檢查
          echo "📋 4. 程式碼品質檢查..."
          flake8 app/ --max-complexity=$TDD_COMPLEXITY_LIMIT || QUALITY_FAILED=true
          
          # 結果處理
          if [ "$UNIT_FAILED" = "true" ] || [ "$INTEGRATION_FAILED" = "true" ]; then
            if [ "$RED_PHASE" != "true" ]; then
              echo "❌ 測試失敗且非 RED 階段"
              exit 1
            else
              echo "✅ RED 階段允許測試失敗"
            fi
          fi
          
          if [ "$COVERAGE_FAILED" = "true" ]; then
            echo "❌ 測試覆蓋率未達 $TDD_COVERAGE_THRESHOLD% TDD 標準"
            exit 1
          fi
          
          if [ "$QUALITY_FAILED" = "true" ]; then
            echo "❌ 程式碼品質不符合 TDD 標準"
            exit 1
          fi
          
          echo "✅ 後端 TDD 測試完成 - ${{ matrix.service }}"
      
      - name: Upload backend coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-${{ matrix.service }}
          path: services/${{ matrix.service }}/htmlcov/
          retention-days: 7

  # Docker TDD 測試
  docker-tdd-tests:
    name: Docker TDD Tests
    runs-on: ubuntu-latest
    needs: [frontend-tdd-tests, backend-tdd-tests]
    if: github.event_name == 'pull_request' || contains(github.ref, 'main')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Run Docker TDD test suite
        run: |
          echo "🐳 執行 Docker TDD 測試套件..."
          
          # 檢查必要檔案
          if [ ! -f docker-compose.test.yml ]; then
            echo "❌ 未找到 docker-compose.test.yml"
            exit 1
          fi
          
          # 執行 Docker 測試腳本
          if [ -f scripts/run-docker-tests.sh ]; then
            echo "📋 執行完整 Docker 測試流程..."
            bash scripts/run-docker-tests.sh
          else
            echo "📋 執行基本 Docker 測試..."
            
            # 測試 Docker Compose 配置
            docker compose -f docker-compose.test.yml config
            
            # 啟動測試環境
            docker compose -f docker-compose.test.yml up -d postgres-test redis-test minio-test
            
            # 等待服務就緒
            sleep 30
            
            # 執行測試
            docker compose -f docker-compose.test.yml run --rm frontend-test || echo "前端測試失敗"
            docker compose -f docker-compose.test.yml run --rm auth-service-test || echo "認證服務測試失敗"
            
            # 清理
            docker compose -f docker-compose.test.yml down -v
          fi
          
          echo "✅ Docker TDD 測試完成"
      
      - name: Upload Docker test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-reports
          path: test-reports/
          retention-days: 7

  # TDD 報告生成
  tdd-reporting:
    name: TDD Reporting
    runs-on: ubuntu-latest
    needs: [frontend-tdd-tests, backend-tdd-tests, docker-tdd-tests]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/
      
      - name: Generate TDD summary report
        run: |
          echo "📊 生成 TDD 摘要報告..."
          
          # 建立報告目錄
          mkdir -p tdd-reports
          
          # 生成 HTML 報告
          cat > tdd-reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>TDD CI/CD 報告</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .header { background: #2196F3; color: white; padding: 20px; border-radius: 5px; }
                  .section { margin: 20px 0; padding: 15px; border-left: 4px solid #2196F3; }
                  .success { border-left-color: #4CAF50; }
                  .warning { border-left-color: #FF9800; }
                  .error { border-left-color: #F44336; }
                  .metric { display: inline-block; margin: 10px; padding: 10px; background: #f5f5f5; border-radius: 3px; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>🧬 TDD CI/CD 測試報告</h1>
                  <p>提交: ${{ github.sha }}</p>
                  <p>分支: ${{ github.ref_name }}</p>
              </div>
          EOF
          
          # 檢查測試結果
          if [ "${{ needs.frontend-tdd-tests.result }}" = "success" ]; then
            echo '<div class="section success"><h2>✅ 前端 TDD 測試通過</h2></div>' >> tdd-reports/index.html
          else
            echo '<div class="section error"><h2>❌ 前端 TDD 測試失敗</h2></div>' >> tdd-reports/index.html
          fi
          
          if [ "${{ needs.backend-tdd-tests.result }}" = "success" ]; then
            echo '<div class="section success"><h2>✅ 後端 TDD 測試通過</h2></div>' >> tdd-reports/index.html
          else
            echo '<div class="section error"><h2>❌ 後端 TDD 測試失敗</h2></div>' >> tdd-reports/index.html
          fi
          
          # 添加指標
          cat >> tdd-reports/index.html << 'EOF'
              <div class="section">
                  <h2>📊 TDD 指標</h2>
                  <div class="metric">
                      <strong>覆蓋率要求:</strong> ≥90%
                  </div>
                  <div class="metric">
                      <strong>複雜度限制:</strong> ≤10
                  </div>
                  <div class="metric">
                      <strong>測試執行時間:</strong> <10分鐘
                  </div>
              </div>
              
              <div class="section">
                  <h2>🔗 相關連結</h2>
                  <ul>
                      <li><a href="../coverage-reports/">測試覆蓋率報告</a></li>
                      <li><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">CI/CD 執行詳情</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF
          
          echo "✅ TDD 報告生成完成"
      
      - name: Upload TDD reports
        uses: actions/upload-artifact@v4
        with:
          name: tdd-reports
          path: tdd-reports/
          retention-days: 30
      
      - name: Comment PR with TDD results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const frontendResult = '${{ needs.frontend-tdd-tests.result }}';
            const backendResult = '${{ needs.backend-tdd-tests.result }}';
            const dockerResult = '${{ needs.docker-tdd-tests.result }}';
            
            const body = `
            ## 🧬 TDD CI/CD 測試結果
            
            | 測試類型 | 結果 |
            |---------|------|
            | 前端 TDD 測試 | ${frontendResult === 'success' ? '✅ 通過' : '❌ 失敗'} |
            | 後端 TDD 測試 | ${backendResult === 'success' ? '✅ 通過' : '❌ 失敗'} |
            | Docker TDD 測試 | ${dockerResult === 'success' ? '✅ 通過' : '❌ 失敗'} |
            
            ### TDD 品質指標
            - 測試覆蓋率要求: ≥90%
            - 程式碼複雜度限制: ≤10
            - 遵循 Red-Green-Refactor 循環
            
            [查看詳細報告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # TDD 部署檢查
  tdd-deployment-check:
    name: TDD Deployment Check
    runs-on: ubuntu-latest
    needs: [tdd-reporting]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Final TDD validation
        run: |
          echo "🚀 最終 TDD 驗證..."
          
          # 檢查所有測試是否通過
          if [ "${{ needs.frontend-tdd-tests.result }}" != "success" ] || [ "${{ needs.backend-tdd-tests.result }}" != "success" ]; then
            echo "❌ 存在失敗的測試，停止部署"
            exit 1
          fi
          
          echo "✅ 所有 TDD 檢查通過，可以部署"
          echo "DEPLOYMENT_APPROVED=true" >> $GITHUB_ENV
      
      - name: Trigger deployment
        if: env.DEPLOYMENT_APPROVED == 'true'
        run: |
          echo "🚀 觸發部署流程..."
          echo "✅ 基於 TDD 品質保證的部署已批准"