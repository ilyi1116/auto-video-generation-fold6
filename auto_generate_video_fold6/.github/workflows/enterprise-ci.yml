name: 🏢 企業級 CI/CD 流水線

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 🔍 程式碼品質檢查
  code-quality:
    runs-on: ubuntu-latest
    name: 程式碼品質檢查
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🐍 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 安裝 Python 依賴
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: 🔍 Python 代碼檢查
        run: |
          echo "::group::Black 格式檢查"
          black --check services/
          echo "::endgroup::"
          
          echo "::group::isort 匯入排序檢查"
          isort --check-only services/
          echo "::endgroup::"
          
          echo "::group::Flake8 語法檢查"
          flake8 services/
          echo "::endgroup::"
          
          echo "::group::MyPy 類型檢查"
          mypy services/
          echo "::endgroup::"
          
      - name: 🛡️ 安全性掃描 (Bandit)
        run: |
          bandit -r services/ -f json -o bandit-report.json
          
      - name: 📤 上傳安全報告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: bandit-report.json

  # 🧪 自動化測試
  test-backend:
    runs-on: ubuntu-latest
    name: 後端測試
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🐍 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 安裝依賴
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: 🧪 運行單元測試
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          pytest tests/ -v \
            --cov=services \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junitxml=test-results.xml
            
      - name: 📊 上傳測試覆蓋率
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          
      - name: 📤 上傳測試報告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: backend-test-results
          path: |
            test-results.xml
            htmlcov/

  # 🌐 前端測試
  test-frontend:
    runs-on: ubuntu-latest
    name: 前端測試
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🟢 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 📦 安裝依賴
        working-directory: frontend
        run: npm ci
        
      - name: 🔍 TypeScript 類型檢查
        working-directory: frontend
        run: npm run type-check
        
      - name: 🧪 運行單元測試
        working-directory: frontend
        run: npm run test:coverage
        
      - name: 🎭 運行 E2E 測試
        working-directory: frontend
        run: |
          npm run build
          npm run test:e2e
          
      - name: 📤 上傳前端測試報告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/playwright-report/

  # 🐳 Docker 映像構建
  build-images:
    needs: [code-quality, test-backend, test-frontend]
    runs-on: ubuntu-latest
    name: 構建 Docker 映像
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🔐 登入容器註冊表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📝 提取元數據
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: 🏗️ 設置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔨 構建並推送映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🔍 掃描映像漏洞
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 上傳漏洞掃描結果
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # 🚀 部署到測試環境
  deploy-staging:
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    name: 部署到測試環境
    environment:
      name: staging
      url: https://staging.autovideo.com
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🚀 部署到 Staging
        run: |
          echo "部署到測試環境..."
          # 這裡應該包含實際的部署邏輯
          
      - name: 🧪 運行冒煙測試
        run: |
          echo "運行冒煙測試..."
          # 基本健康檢查測試
          
      - name: 📊 效能基準測試
        run: |
          echo "運行效能測試..."
          # 載入測試和效能基準

  # 🏭 部署到生產環境
  deploy-production:
    needs: [deploy-staging]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    name: 部署到生產環境
    environment:
      name: production
      url: https://autovideo.com
    steps:
      - name: 📥 Checkout 程式碼
        uses: actions/checkout@v4
        
      - name: 🚀 藍綠部署
        run: |
          echo "執行藍綠部署..."
          # 實際的生產部署邏輯
          
      - name: 📈 更新監控告警
        run: |
          echo "更新監控配置..."
          # 更新 Prometheus 規則和 Grafana 儀表板
          
      - name: 📢 發送部署通知
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚀 生產環境部署完成
            版本: ${{ github.ref_name }}
            狀態: ${{ job.status }}

  # 📊 效能監控
  performance-monitoring:
    needs: [deploy-production]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    name: 效能監控與報告
    steps:
      - name: 📈 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: https://autovideo.com
          configPath: .lighthouserc.json
          
      - name: 📊 生成效能報告
        run: |
          echo "生成效能分析報告..."
          
      - name: 📤 上傳效能報告
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: lighthouse-reports/

  # 🔔 通知與報告
  notify:
    if: always()
    needs: [code-quality, test-backend, test-frontend, build-images]
    runs-on: ubuntu-latest
    name: 通知與報告
    steps:
      - name: 📊 生成執行摘要
        run: |
          echo "## 🚀 CI/CD 執行摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 階段 | 狀態 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| 程式碼品質 | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 後端測試 | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 前端測試 | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 映像構建 | ${{ needs.build-images.result }} |" >> $GITHUB_STEP_SUMMARY
          
      - name: 📧 發送 Email 通知
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "❌ CI/CD 流水線失敗 - ${{ github.repository }}"
          body: |
            CI/CD 流水線在 ${{ github.ref }} 分支上失败。
            
            請檢查 GitHub Actions 日誌以了解詳細信息：
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: devops@autovideo.com