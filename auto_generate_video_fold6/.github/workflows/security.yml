name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  # SAST (Static Application Security Testing)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: +security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, data-service, ai-service, video-service, storage-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -t ${{ matrix.service }}:latest services/${{ matrix.service }}
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install safety
        run: pip install safety
      
      - name: Check for security vulnerabilities
        run: |
          find services -name "requirements.txt" -exec echo "Checking {}" \; -exec safety check -r {} \;
      
      - name: Run pip-audit
        run: |
          pip install pip-audit
          find services -name "requirements.txt" -exec pip-audit -r {} \;

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance check
  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install pip-licenses
        run: pip install pip-licenses
      
      - name: Check licenses
        run: |
          for service in services/*/; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Checking licenses for $service"
              pip install -r "$service/requirements.txt"
              pip-licenses --format=json --output-file="$service/licenses.json"
              pip-licenses --fail-on="GPL"
            fi
          done

  # Security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast, container-scan, dependency-scan, secret-scan, license-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate security report
        run: |
          cat > security-report.md << EOF
          # Security Scan Report
          
          **Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Scan Results
          
          - **SAST (CodeQL):** ${{ needs.sast.result }}
          - **Container Scan:** ${{ needs.container-scan.result }}
          - **Dependency Scan:** ${{ needs.dependency-scan.result }}
          - **Secret Scan:** ${{ needs.secret-scan.result }}
          - **License Scan:** ${{ needs.license-scan.result }}
          
          ## Next Steps
          
          Please review any failed scans and address identified security issues before deployment.
          EOF
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });