name: 後端服務品質檢查

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'pyproject.toml'
      - '.github/workflows/backend-quality.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'pyproject.toml'
      - '.github/workflows/backend-quality.yml'

env:
  PYTHON_VERSION: "3.11"

jobs:
  code-quality:
    name: 後端程式碼品質檢查
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [
          "auth-service",
          "ai-service", 
          "video-service",
          "data-service",
          "storage-service",
          "social-service",
          "trend-service",
          "scheduler-service",
          "inference-service"
        ]
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設置 Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安裝系統依賴
      run: |
        sudo apt-get update
        sudo apt-get install -y redis-server postgresql-client

    - name: 安裝 Python 依賴
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: 安裝服務特定依賴
      working-directory: ./services/${{ matrix.service }}
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi

    - name: 程式碼格式檢查 (Black)
      working-directory: ./services/${{ matrix.service }}
      run: |
        black --check --diff .

    - name: 導入排序檢查 (isort)
      working-directory: ./services/${{ matrix.service }}
      run: |
        isort --check-only --diff .

    - name: 程式碼風格檢查 (Ruff)
      working-directory: ./services/${{ matrix.service }}
      run: |
        ruff check .

    - name: 程式碼風格檢查 (Flake8)
      working-directory: ./services/${{ matrix.service }}
      run: |
        flake8 .

    - name: 類型檢查 (MyPy)
      working-directory: ./services/${{ matrix.service }}
      run: |
        mypy .
      continue-on-error: true  # MyPy 可能需要額外配置

    - name: 安全性檢查 (Bandit)
      working-directory: ./services/${{ matrix.service }}
      run: |
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Bandit 安全掃描完成"
          cat bandit-report.json
        fi

    - name: 上傳 Bandit 報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report-${{ matrix.service }}
        path: services/${{ matrix.service }}/bandit-report.json
        retention-days: 7

  unit-tests:
    name: 後端單元測試
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        service: [
          "auth-service",
          "ai-service", 
          "video-service",
          "data-service",
          "storage-service",
          "social-service",
          "trend-service",
          "scheduler-service",
          "inference-service"
        ]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設置 Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安裝 Python 依賴
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: 安裝服務特定依賴
      working-directory: ./services/${{ matrix.service }}
      run: |
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
        if [ -f requirements-dev.txt ]; then
          pip install -r requirements-dev.txt
        fi

    - name: 設置測試環境變數
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-testing-only" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
        echo "DISABLE_EXTERNAL_APIS=true" >> $GITHUB_ENV

    - name: 執行單元測試
      working-directory: ./services/${{ matrix.service }}
      run: |
        if [ -d tests ]; then
          pytest tests/ \
            --cov=. \
            --cov-report=html:htmlcov \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --cov-fail-under=70 \
            --junit-xml=pytest-results.xml \
            -v
        else
          echo "沒有找到測試目錄，跳過測試"
        fi

    - name: 上傳測試覆蓋率到 Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./services/${{ matrix.service }}/coverage.xml
        flags: backend,${{ matrix.service }}
        name: ${{ matrix.service }}-coverage
        fail_ci_if_error: false

    - name: 上傳測試結果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.service }}
        path: |
          services/${{ matrix.service }}/htmlcov/
          services/${{ matrix.service }}/pytest-results.xml
          services/${{ matrix.service }}/coverage.xml
        retention-days: 7

  integration-tests:
    name: 後端整合測試
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設置 Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安裝系統依賴
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: 安裝 Python 依賴
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: 安裝所有服務依賴
      run: |
        for service in services/*/; do
          if [ -f "$service/requirements.txt" ]; then
            pip install -r "$service/requirements.txt"
          fi
          if [ -f "$service/requirements-dev.txt" ]; then
            pip install -r "$service/requirements-dev.txt"
          fi
        done

    - name: 設置測試環境變數
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "JWT_SECRET=test-secret-key-for-testing-only" >> $GITHUB_ENV
        echo "DISABLE_EXTERNAL_APIS=true" >> $GITHUB_ENV

    - name: 設置測試資料庫
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -c "CREATE EXTENSION IF NOT EXISTS uuid-ossp;"

    - name: 執行整合測試
      run: |
        pytest services/ \
          -m integration \
          --cov=services \
          --cov-report=html:htmlcov-integration \
          --cov-report=xml:coverage-integration.xml \
          --junit-xml=pytest-integration-results.xml \
          -v

    - name: 上傳整合測試覆蓋率
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage-integration.xml
        flags: backend,integration
        name: integration-coverage
        fail_ci_if_error: false

    - name: 上傳整合測試結果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          htmlcov-integration/
          pytest-integration-results.xml
          coverage-integration.xml
        retention-days: 7

  security-scan:
    name: 後端安全掃描
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout 程式碼
      uses: actions/checkout@v4

    - name: 設置 Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 安裝安全掃描工具
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: 執行依賴安全掃描 (Safety)
      run: |
        # 掃描主要依賴
        safety check --json --output safety-report.json || true
        
        # 掃描各服務依賴
        for service in services/*/; do
          if [ -f "$service/requirements.txt" ]; then
            echo "掃描 $service 依賴..."
            safety check -r "$service/requirements.txt" --json --output "safety-report-$(basename $service).json" || true
          fi
        done

    - name: 執行程式碼安全掃描 (Bandit)
      run: |
        bandit -r services/ -f json -o bandit-security-report.json || true

    - name: 執行高級安全掃描 (Semgrep)
      run: |
        semgrep --config=auto services/ --json --output=semgrep-report.json || true

    - name: 上傳安全掃描報告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report*.json
          bandit-security-report.json
          semgrep-report.json
        retention-days: 30

  quality-gate:
    name: 後端品質閘道
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-scan]
    if: always()
    
    steps:
    - name: 檢查所有作業狀態
      run: |
        echo "程式碼品質檢查: ${{ needs.code-quality.result }}"
        echo "單元測試: ${{ needs.unit-tests.result }}"
        echo "整合測試: ${{ needs.integration-tests.result }}"
        echo "安全掃描: ${{ needs.security-scan.result }}"
        
        if [ "${{ needs.code-quality.result }}" != "success" ] || \
           [ "${{ needs.unit-tests.result }}" != "success" ] || \
           [ "${{ needs.integration-tests.result }}" != "success" ] || \
           [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "❌ 後端品質閘道檢查失敗"
          exit 1
        else
          echo "✅ 所有後端品質檢查通過"
        fi

    - name: 評論 PR 結果
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo, number } = context.issue;
          const results = {
            'code-quality': '${{ needs.code-quality.result }}',
            'unit-tests': '${{ needs.unit-tests.result }}',
            'integration-tests': '${{ needs.integration-tests.result }}',
            'security-scan': '${{ needs.security-scan.result }}'
          };
          
          const passed = Object.values(results).every(r => r === 'success');
          const emoji = passed ? '✅' : '❌';
          const status = passed ? '通過' : '失敗';
          
          const comment = `
          ## ${emoji} 後端品質檢查結果：${status}
          
          | 檢查項目 | 狀態 |
          |---------|------|
          | 程式碼品質 | ${results['code-quality'] === 'success' ? '✅' : '❌'} |
          | 單元測試 | ${results['unit-tests'] === 'success' ? '✅' : '❌'} |
          | 整合測試 | ${results['integration-tests'] === 'success' ? '✅' : '❌'} |
          | 安全掃描 | ${results['security-scan'] === 'success' ? '✅' : '❌'} |
          
          ${passed ? '🎉 所有後端檢查都通過了！可以進行合併。' : '⚠️ 請修復失敗的檢查項目後再進行合併。'}
          `;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: comment
          });