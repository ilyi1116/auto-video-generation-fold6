# Docker Compose 測試環境配置
# 專為 TDD 開發流程優化的輕量級測試環境

version: '3.8'

services:
  # 測試專用 PostgreSQL
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
    volumes:
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/01-init-test-db.sql
      - ./scripts/video_schema.sql:/docker-entrypoint-initdb.d/02-video-schema.sql
    networks:
      - test-network
    ports:
      - "5433:5432"  # 避免與開發 DB 衝突
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 10s
      timeout: 5s
      retries: 3
    tmpfs:
      - /var/lib/postgresql/data  # 使用記憶體儲存，測試後自動清除

  # 測試專用 Redis
  redis-test:
    image: redis:7-alpine
    networks:
      - test-network
    ports:
      - "6380:6379"  # 避免與開發 Redis 衝突
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    tmpfs:
      - /data  # 使用記憶體儲存

  # 測試專用 MinIO
  minio-test:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: test_access_key
      MINIO_ROOT_PASSWORD: test_secret_key
    networks:
      - test-network
    ports:
      - "9002:9000"
      - "9003:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
    tmpfs:
      - /data  # 使用記憶體儲存

  # 前端測試服務
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
    volumes:
      - ./frontend:/app
      - /app/node_modules  # 避免覆蓋 node_modules
    networks:
      - test-network
    environment:
      - NODE_ENV=test
      - CI=true
    command: >
      sh -c "
        echo '🧪 啟動前端測試環境...' &&
        npm run test:unit:coverage &&
        npm run test:integration &&
        echo '✅ 前端測試完成'
      "

  # 後端測試服務 - 認證服務
  auth-service-test:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile.test
    volumes:
      - ./services/auth-service:/app
    networks:
      - test-network
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
      - REDIS_URL=redis://redis-test:6379/0
      - TESTING=true
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    command: >
      sh -c "
        echo '🧪 啟動認證服務測試...' &&
        python -m pytest tests/ --cov=app --cov-report=term-missing --cov-fail-under=90 -v &&
        echo '✅ 認證服務測試完成'
      "

  # 後端測試服務 - 資料服務
  data-service-test:
    build:
      context: ./services/data-service
      dockerfile: Dockerfile.test
    volumes:
      - ./services/data-service:/app
    networks:
      - test-network
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
      - REDIS_URL=redis://redis-test:6379/0
      - S3_ENDPOINT_URL=http://minio-test:9000
      - S3_ACCESS_KEY_ID=test_access_key
      - S3_SECRET_ACCESS_KEY=test_secret_key
      - TESTING=true
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
      minio-test:
        condition: service_healthy
    command: >
      sh -c "
        echo '🧪 啟動資料服務測試...' &&
        python -m pytest tests/ --cov=app --cov-report=term-missing --cov-fail-under=90 -v &&
        echo '✅ 資料服務測試完成'
      "

  # 整合測試服務
  integration-test:
    build:
      context: ./tests/integration
      dockerfile: Dockerfile
    volumes:
      - ./tests/integration:/app
    networks:
      - test-network
    environment:
      - API_BASE_URL=http://auth-service-test:8001
      - DATA_SERVICE_URL=http://data-service-test:8002
      - DATABASE_URL=postgresql://test_user:test_password@postgres-test:5432/test_db
      - REDIS_URL=redis://redis-test:6379/0
    depends_on:
      - auth-service-test
      - data-service-test
    command: >
      sh -c "
        echo '🧪 啟動整合測試...' &&
        python -m pytest tests/ -v --tb=short &&
        echo '✅ 整合測試完成'
      "

  # 測試報告收集服務
  test-reporter:
    image: node:18-alpine
    volumes:
      - ./frontend/coverage:/frontend-coverage:ro
      - ./services/auth-service/htmlcov:/auth-coverage:ro
      - ./services/data-service/htmlcov:/data-coverage:ro
      - ./test-reports:/reports
    networks:
      - test-network
    command: >
      sh -c "
        echo '📊 收集測試報告...' &&
        mkdir -p /reports/coverage &&
        cp -r /frontend-coverage/* /reports/coverage/ 2>/dev/null || echo '前端覆蓋率報告未找到' &&
        cp -r /auth-coverage/* /reports/coverage/ 2>/dev/null || echo '認證服務覆蓋率報告未找到' &&
        cp -r /data-coverage/* /reports/coverage/ 2>/dev/null || echo '資料服務覆蓋率報告未找到' &&
        echo '✅ 測試報告收集完成，查看 ./test-reports/coverage/'
      "

networks:
  test-network:
    driver: bridge

# 測試專用的臨時卷，測試完成後會被清除
volumes:
  test_postgres_data:
  test_redis_data:
  test_minio_data: