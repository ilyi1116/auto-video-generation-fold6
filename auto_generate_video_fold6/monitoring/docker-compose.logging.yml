version: '3.8'

services:
  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    networks:
      - logging
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=a7a6311933d3503b89bc2dbc36572c33a6c10925682e591bffcab6911c06786d
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./kibana/dashboards:/usr/share/kibana/dashboards:ro
    networks:
      - logging
    depends_on:
      - elasticsearch
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: logstash
    environment:
      - LS_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "5044:5044"  # Beats input
      - "5001:5001"  # HTTP input
      - "5514:5514"  # Syslog input
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash/patterns:/usr/share/logstash/patterns:ro
      - logstash_data:/usr/share/logstash/data
    networks:
      - logging
    depends_on:
      - elasticsearch
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Fluent Bit for lightweight log collection
  fluent-bit:
    image: fluent/fluent-bit:2.2
    container_name: fluent-bit
    ports:
      - "24224:24224"  # Forward input
      - "2020:2020"    # HTTP server
    volumes:
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logging/parsers.conf:/fluent-bit/etc/parsers.conf:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - fluent_bit_data:/fluent-bit/data
    networks:
      - logging
    depends_on:
      - elasticsearch
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Filebeat for collecting logs from files
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.10.0
    container_name: filebeat
    user: root
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - filebeat_data:/usr/share/filebeat/data
    environment:
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - KIBANA_HOST=kibana:5601
    networks:
      - logging
    depends_on:
      - elasticsearch
      - kibana
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Log rotator service
  log-rotator:
    image: alpine:latest
    container_name: log-rotator
    volumes:
      - /var/log/auto-video:/var/log/auto-video
      - ./scripts/log-rotation.sh:/usr/local/bin/log-rotation.sh:ro
    command: |
      sh -c '
        apk add --no-cache dcron
        echo "0 2 * * * /usr/local/bin/log-rotation.sh" | crontab -
        crond -f
      '
    networks:
      - logging
    restart: unless-stopped

  # Log analytics service
  log-analytics:
    image: python:3.11-slim
    container_name: log-analytics
    volumes:
      - ./analytics:/app
      - log_analytics_data:/data
    working_dir: /app
    command: |
      sh -c '
        pip install -r requirements.txt
        python log_analyzer.py
      '
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - REDIS_URL=redis://redis:6379
    networks:
      - logging
    depends_on:
      - elasticsearch
      - redis
    restart: unless-stopped

  # Redis for caching analytics
  redis:
    image: redis:7-alpine
    container_name: redis-logging
    ports:
      - "6380:6379"
    volumes:
      - redis_logging_data:/data
    networks:
      - logging
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Grafana for log dashboards
  grafana-logs:
    image: grafana/grafana:10.0.0
    container_name: grafana-logs
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-elasticsearch-datasource
    volumes:
      - grafana_logs_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - logging
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  elasticsearch_data:
    driver: local
  logstash_data:
    driver: local
  fluent_bit_data:
    driver: local
  filebeat_data:
    driver: local
  log_analytics_data:
    driver: local
  redis_logging_data:
    driver: local
  grafana_logs_data:
    driver: local

networks:
  logging:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16