apiVersion: v1
kind: ConfigMap
metadata:
  name: auto-video-config
  namespace: auto-video
  labels:
    app.kubernetes.io/name: auto-video
    app.kubernetes.io/component: config
data:
  # Application Configuration
  APP_NAME: "Auto Video System"
  APP_VERSION: "1.0.0"
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "info"
  
  # Database Configuration
  POSTGRES_HOST: "postgres-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "autovideo_prod"
  
  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # Storage Configuration
  S3_BUCKET: "autovideo-prod"
  S3_REGION: "us-east-1"
  
  # JWT Configuration
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRATION: "86400"
  
  # CORS Configuration
  CORS_ALLOW_ORIGINS: "https://autovideo.yourdomain.com"
  CORS_ALLOW_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
  CORS_ALLOW_HEADERS: "Content-Type,Authorization,X-Requested-With"
  CORS_ALLOW_CREDENTIALS: "true"
  
  # Security Configuration
  SECURE_COOKIES: "true"
  SESSION_SECURE: "true"
  CSRF_PROTECTION: "true"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_MAX_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60"
  
  # Monitoring Configuration
  METRICS_ENABLED: "true"
  HEALTH_CHECK_ENABLED: "true"
  PROMETHEUS_PORT: "9090"
  
  # GDPR Configuration
  GDPR_ENABLED: "true"
  DATA_RETENTION_DAYS: "365"
  COOKIE_CONSENT_REQUIRED: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: auto-video
  labels:
    app.kubernetes.io/name: nginx
    app.kubernetes.io/component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        server_tokens off;
        
        # Gzip Configuration
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        # Rate Limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
        
        # Security Headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        upstream api_backend {
            server api-gateway-service:8000;
        }
        
        upstream frontend_backend {
            server frontend-service:3000;
        }
        
        server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }
        
        server {
            listen 443 ssl http2;
            server_name autovideo.yourdomain.com;
            
            ssl_certificate /etc/ssl/certs/tls.crt;
            ssl_certificate_key /etc/ssl/private/tls.key;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;
            
            location / {
                proxy_pass http://frontend_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://api_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /api/upload/ {
                limit_req zone=upload burst=5 nodelay;
                client_max_body_size 100M;
                proxy_pass http://api_backend/upload/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }