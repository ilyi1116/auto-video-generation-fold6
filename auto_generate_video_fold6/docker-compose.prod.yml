version: '3.8'

# Production Docker Compose with HTTPS/TLS Support
services:
  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (HTTPS enabled)
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    expose:
      - "8000"
    volumes:
      - ./services/api-gateway/app:/app/app:ro
      - ./certs:/app/certs:ro
    env_file:
      - .env
    environment:
      - SSL_ENABLED=true
      - SSL_CERT_PATH=/app/certs/domain.crt
      - SSL_KEY_PATH=/app/certs/domain.key
      - SECURITY_HEADERS_ENABLED=true
    depends_on:
      - postgres
      - redis
      - auth-service
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://localhost:8000/health', verify=False)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # All other services remain the same but with SSL environment variables
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    expose:
      - "8001"
    volumes:
      - ./services/auth-service/app:/app/app:ro
    env_file:
      - .env
    environment:
      - SSL_ENABLED=false  # Internal services don't need SSL
      - SECURITY_HEADERS_ENABLED=true
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL with enhanced security
  postgres:
    image: postgres:15-alpine
    expose:
      - "5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./scripts/video_schema.sql:/docker-entrypoint-initdb.d/02-video-schema.sql:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: postgres -c config_file=/etc/postgresql/postgresql.conf

  # Redis with authentication
  redis:
    image: redis:7-alpine
    expose:
      - "6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO with TLS
  minio:
    image: minio/minio:latest
    expose:
      - "9000"
      - "9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
      MINIO_SERVER_URL: https://minio.yourdomain.com
      MINIO_BROWSER_REDIRECT_URL: https://minio-console.yourdomain.com
    volumes:
      - minio_data:/data
      - ./certs:/certs:ro
    networks:
      - app-network
    command: server /data --console-address ":9001" --certs-dir /certs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local