syntax = "proto3";

package voice_service;

// Common data types
message User {
  int32 id = 1;
  string username = 2;
  string email = 3;
}

message VoiceModel {
  int32 id = 1;
  int32 user_id = 2;
  string name = 3;
  string description = 4;
  string model_type = 5;
  string language = 6;
  string status = 7;
  string model_path = 8;
  string config_data = 9;
  int32 training_data_size = 10;
  double training_duration = 11;
  double quality_score = 12;
  string created_at = 13;
  string updated_at = 14;
}

message SynthesisJob {
  int32 id = 1;
  int32 model_id = 2;
  int32 user_id = 3;
  string text = 4;
  string status = 5;
  string audio_url = 6;
  double audio_duration = 7;
  double processing_time = 8;
  string synthesis_params = 9;
  string created_at = 10;
  string completed_at = 11;
}

// Authentication Service
service AuthService {
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse);
}

message ValidateTokenRequest {
  string token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  User user = 2;
  string error = 3;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  string error = 3;
}

message GetUserInfoRequest {
  int32 user_id = 1;
}

message GetUserInfoResponse {
  User user = 1;
  string error = 2;
}

// Data Service
service DataService {
  rpc ProcessAudioFile(ProcessAudioFileRequest) returns (ProcessAudioFileResponse);
  rpc ValidateAudioFile(ValidateAudioFileRequest) returns (ValidateAudioFileResponse);
  rpc GetDatasetInfo(GetDatasetInfoRequest) returns (GetDatasetInfoResponse);
  rpc CreateVoiceModel(CreateVoiceModelRequest) returns (CreateVoiceModelResponse);
  rpc GetVoiceModel(GetVoiceModelRequest) returns (GetVoiceModelResponse);
  rpc ListVoiceModels(ListVoiceModelsRequest) returns (ListVoiceModelsResponse);
}

message ProcessAudioFileRequest {
  int32 user_id = 1;
  string file_path = 2;
  string file_name = 3;
  string transcription = 4;
  int32 dataset_id = 5;
}

message ProcessAudioFileResponse {
  bool success = 1;
  string processed_path = 2;
  double duration = 3;
  int32 sample_rate = 4;
  string error = 5;
}

message ValidateAudioFileRequest {
  string file_path = 1;
  string file_name = 2;
}

message ValidateAudioFileResponse {
  bool valid = 1;
  string format = 2;
  double duration = 3;
  int32 sample_rate = 4;
  string error = 5;
}

message GetDatasetInfoRequest {
  int32 dataset_id = 1;
  int32 user_id = 2;
}

message GetDatasetInfoResponse {
  int32 dataset_id = 1;
  string name = 2;
  string description = 3;
  int32 file_count = 4;
  double total_duration = 5;
  string status = 6;
  string created_at = 7;
  string error = 8;
}

message CreateVoiceModelRequest {
  int32 user_id = 1;
  string name = 2;
  string description = 3;
  string model_type = 4;
  string language = 5;
  int32 dataset_id = 6;
  string config_data = 7;
}

message CreateVoiceModelResponse {
  VoiceModel model = 1;
  string error = 2;
}

message GetVoiceModelRequest {
  int32 model_id = 1;
  int32 user_id = 2;
}

message GetVoiceModelResponse {
  VoiceModel model = 1;
  string error = 2;
}

message ListVoiceModelsRequest {
  int32 user_id = 1;
  string status_filter = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message ListVoiceModelsResponse {
  repeated VoiceModel models = 1;
  int32 total_count = 2;
  string error = 3;
}

// Inference Service
service InferenceService {
  rpc SynthesizeVoice(SynthesizeVoiceRequest) returns (SynthesizeVoiceResponse);
  rpc BatchSynthesize(BatchSynthesizeRequest) returns (BatchSynthesizeResponse);
  rpc GetSynthesisJob(GetSynthesisJobRequest) returns (GetSynthesisJobResponse);
  rpc ListSynthesisJobs(ListSynthesisJobsRequest) returns (ListSynthesisJobsResponse);
  rpc PreloadModel(PreloadModelRequest) returns (PreloadModelResponse);
  rpc GetModelCacheStats(GetModelCacheStatsRequest) returns (GetModelCacheStatsResponse);
}

message SynthesizeVoiceRequest {
  int32 user_id = 1;
  string text = 2;
  int32 model_id = 3;
  double speed = 4;
  double pitch = 5;
  double volume = 6;
  string emotion = 7;
  bool return_audio = 8;
}

message SynthesizeVoiceResponse {
  int32 job_id = 1;
  string status = 2;
  string audio_url = 3;
  double audio_duration = 4;
  double processing_time = 5;
  string error = 6;
}

message BatchSynthesizeRequest {
  int32 user_id = 1;
  repeated string texts = 2;
  int32 model_id = 3;
  double speed = 4;
  double pitch = 5;
  double volume = 6;
  string emotion = 7;
}

message BatchSynthesizeResponse {
  repeated int32 job_ids = 1;
  string status = 2;
  int32 batch_size = 3;
  string error = 4;
}

message GetSynthesisJobRequest {
  int32 job_id = 1;
  int32 user_id = 2;
}

message GetSynthesisJobResponse {
  SynthesisJob job = 1;
  string error = 2;
}

message ListSynthesisJobsRequest {
  int32 user_id = 1;
  string status_filter = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message ListSynthesisJobsResponse {
  repeated SynthesisJob jobs = 1;
  int32 total_count = 2;
  string error = 3;
}

message PreloadModelRequest {
  int32 model_id = 1;
  int32 user_id = 2;
}

message PreloadModelResponse {
  bool success = 1;
  string model_status = 2;
  string error = 3;
}

message GetModelCacheStatsRequest {
}

message GetModelCacheStatsResponse {
  int32 cached_models = 1;
  int32 max_cache_size = 2;
  int32 cache_ttl = 3;
  repeated int32 model_ids = 4;
  double oldest_cache_age = 5;
}

// Training Service (for future implementation)
service TrainingService {
  rpc StartTraining(StartTrainingRequest) returns (StartTrainingResponse);
  rpc GetTrainingStatus(GetTrainingStatusRequest) returns (GetTrainingStatusResponse);
  rpc StopTraining(StopTrainingRequest) returns (StopTrainingResponse);
}

message StartTrainingRequest {
  int32 model_id = 1;
  int32 user_id = 2;
  int32 dataset_id = 3;
  string training_config = 4;
}

message StartTrainingResponse {
  string task_id = 1;
  string status = 2;
  string error = 3;
}

message GetTrainingStatusRequest {
  string task_id = 1;
  int32 user_id = 2;
}

message GetTrainingStatusResponse {
  string task_id = 1;
  string status = 2;
  double progress = 3;
  string current_step = 4;
  int32 total_steps = 5;
  double elapsed_time = 6;
  double estimated_remaining = 7;
  string error = 8;
}

message StopTrainingRequest {
  string task_id = 1;
  int32 user_id = 2;
}

message StopTrainingResponse {
  bool success = 1;
  string error = 2;
}