# Cursor Pro 專案規則配置
# Auto Video Generation System - 企業級短影片生成平台

## 專案概述
這是一個企業級的 AI 驅動短影片自動生成系統，採用微服務架構，支援多平台發布。

## 技術棧
- 後端：Python (FastAPI, Celery, PostgreSQL, Redis)
- 前端：SvelteKit (TypeScript, Tailwind CSS)
- AI 服務：OpenAI GPT, Gemini Pro, Stability AI, ElevenLabs, Suno.ai
- 容器化：Docker, Docker Compose
- CI/CD：GitHub Actions
- 監控：Prometheus, Grafana

## 程式碼風格指南

### Python 代碼規範
- 使用 Black 進行代碼格式化
- 使用 isort 進行 import 排序
- 使用 Ruff 進行 linting
- 使用 mypy 進行類型檢查
- 函數必須有類型提示和 docstring
- 使用 dataclass 定義數據結構
- 異步函數優先使用 async/await

### 前端代碼規範  
- 使用 TypeScript 嚴格模式
- 使用 ESLint + Prettier 進行格式化
- 組件使用 PascalCase 命名
- 文件使用 kebab-case 命名
- 使用 Tailwind CSS 進行樣式設計
- 優先使用 Svelte 反應式語法

### 通用規範
- 變數和函數使用 snake_case (Python) 或 camelCase (TypeScript)
- 常量使用 UPPER_CASE
- 私有成員使用 _underscore 前綴
- 文件編碼使用 UTF-8
- 行尾使用 LF
- 縮進使用 4 空格 (Python) 或 2 空格 (TypeScript/Svelte)

## 專案結構說明

```
auto_generate_video_fold6/
├── config/                 # 配置文件
│   ├── base-config.json   # 基礎配置模板
│   ├── startup-config.json # 啟動模式配置
│   └── enterprise-config.json # 企業模式配置
├── services/              # 微服務
│   ├── ai-service/       # AI 服務 (文字、圖像生成)
│   ├── music-service/    # 音樂生成服務
│   ├── video-service/    # 影片處理服務
│   ├── social-service/   # 社媒發布服務
│   └── trend-service/    # 趨勢分析服務
├── frontend/             # 前端應用
├── monitoring/           # 監控和分析
├── scripts/             # 工具腳本
└── tests/              # 測試文件
```

## 開發最佳實踐

### 1. 錯誤處理
- 使用結構化異常處理
- 記錄詳細的錯誤日誌
- 為用戶提供友好的錯誤信息
- 實現適當的錯誤恢復機制

### 2. 日誌記錄
- 使用 structured logging
- 包含 request_id 用於追蹤
- 記錄關鍵操作的開始和結束
- 記錄性能指標

### 3. 測試策略
- 單元測試覆蓋率 > 80%
- 集成測試覆蓋關鍵流程
- E2E 測試覆蓋用戶核心路徑
- 使用 mock 隔離外部依賴

### 4. 性能優化
- 使用異步操作處理 I/O
- 實現適當的緩存策略
- 優化數據庫查詢
- 監控內存使用

### 5. 安全考慮
- 驗證所有用戶輸入
- 使用環境變數管理機密
- 實現速率限制
- 定期更新依賴項

## AI 服務整合規範

### 1. 服務編排
- 使用 AIOrchestrator 統一管理
- 實現自動故障轉移
- 支持負載均衡
- 監控 API 成本

### 2. 提供商配置
```python
# 優先級順序：OpenAI > Gemini > 其他
primary_provider = "openai"
fallback_provider = "gemini"
```

### 3. 成本控制
- 每日預算限制
- API 速率限制
- 成本追蹤和警報
- 智能降級策略

## 文件命名約定

### Python 文件
- 模組：`snake_case.py`
- 類：`PascalCase`
- 函數：`snake_case()`
- 變數：`snake_case`

### 前端文件
- 組件：`PascalCase.svelte`
- 頁面：`+page.svelte`
- 布局：`+layout.svelte`
- 工具：`camelCase.ts`

## 提交信息規範

使用 Conventional Commits 格式：
```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

類型：
- `feat`: 新功能
- `fix`: 錯誤修復
- `docs`: 文檔更新
- `style`: 代碼格式化
- `refactor`: 重構
- `test`: 測試
- `chore`: 構建或工具更改

範例：
```
feat(ai): add Gemini Pro integration with fallback support
fix(video): resolve audio sync issues in TikTok exports
docs(api): update endpoint documentation
```

## 環境配置

### 開發環境
- Python 3.9+
- Node.js 18+
- Docker Desktop
- 推薦使用 Python venv
- 配置 pre-commit hooks

### 必需的環境變數
```bash
# AI 服務 API 金鑰
OPENAI_API_KEY=
GEMINI_API_KEY=
STABILITY_API_KEY=
ELEVENLABS_API_KEY=
SUNO_API_KEY=

# 數據庫配置
DATABASE_URL=
REDIS_URL=

# 應用配置
APP_MODE=startup  # startup 或 enterprise
DEBUG=true
```

## 性能基準

### 響應時間目標
- API 響應：< 500ms
- 頁面載入：< 3s
- 影片生成：< 5min
- 圖像生成：< 30s

### 資源使用目標
- CPU 使用率：< 80%
- 內存使用率：< 85%
- 磁盤使用率：< 90%

## 部署策略

### 開發環境
```bash
# 啟動開發服務
docker-compose up -d
npm run dev  # 前端開發服務器
```

### 生產環境
```bash
# 企業模式部署
./scripts/deploy.sh enterprise
# 監控健康狀態
./scripts/health_check.sh
```

## 故障排除指南

### 常見問題
1. **API 配額超限**：檢查成本控制設置
2. **服務無回應**：檢查健康狀態和日誌
3. **生成失敗**：檢查 AI 服務可用性
4. **內存不足**：調整批處理大小

### 調試命令
```bash
# 檢查服務狀態
python monitoring/health_monitor.py once

# 查看成本統計
python monitoring/cost_tracker.py status

# 運行完整測試
python scripts/run_tests.py --type all
```

## Cursor AI 助手指導

當使用 Cursor AI 協助開發時，請遵循以下指導：

1. **上下文提供**：始終提供相關的項目背景和技術要求
2. **代碼一致性**：確保生成的代碼符合項目現有的風格和架構
3. **錯誤處理**：要求 AI 包含適當的錯誤處理和日誌記錄
4. **測試代碼**：同時生成相應的單元測試
5. **文檔註釋**：確保所有函數都有清晰的 docstring
6. **性能考慮**：優先考慮異步操作和資源效率

### AI 協助示例提示
```
"請根據項目的 AIOrchestrator 架構，實現一個新的圖像分析功能，
包含錯誤處理、成本追蹤、以及相應的單元測試。
代碼應該符合項目的 Python 風格指南。"
```

## 代碼審查檢查清單

### 功能性
- [ ] 代碼實現了所需功能
- [ ] 邊界條件得到處理
- [ ] 錯誤場景得到處理

### 代碼質量
- [ ] 符合項目編碼規範
- [ ] 適當的註釋和文檔
- [ ] 沒有硬編碼的值
- [ ] 遵循 DRY 原則

### 性能
- [ ] 沒有明顯的性能瓶頸
- [ ] 適當使用緩存
- [ ] 數據庫查詢優化

### 安全性
- [ ] 輸入驗證
- [ ] 沒有機密信息洩露
- [ ] 適當的權限檢查

### 測試
- [ ] 包含單元測試
- [ ] 測試覆蓋核心邏輯
- [ ] Mock 外部依賴