# Nginx 安全配置
# 生產環境 SSL/TLS 與安全標頭配置

# SSL/TLS 配置
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 1h;
ssl_session_tickets off;

# SSL 安全設定
ssl_buffer_size 1400;
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/ssl/certs/chain.pem;

# Diffie-Hellman 參數
ssl_dhparam /etc/ssl/certs/dhparam.pem;

# 安全標頭配置
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

# 內容安全政策
add_header Content-Security-Policy "
    default-src 'self';
    script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com;
    style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.jsdelivr.net;
    font-src 'self' https://fonts.gstatic.com;
    img-src 'self' data: https: blob:;
    media-src 'self' blob:;
    connect-src 'self' wss: https:;
    frame-src 'none';
    object-src 'none';
    base-uri 'self';
    form-action 'self';
    upgrade-insecure-requests;
" always;

# 移除敏感標頭
more_clear_headers "Server";
more_clear_headers "X-Powered-By";
server_tokens off;

# 限制請求大小
client_max_body_size 100M;
client_body_buffer_size 1M;
client_header_buffer_size 8k;
large_client_header_buffers 4 16k;

# 超時設定
client_body_timeout 60;
client_header_timeout 60;
keepalive_timeout 75 20;
send_timeout 60;

# 連接限制
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;

# 應用限制
limit_conn conn_limit_per_ip 20;
limit_req zone=req_limit_per_ip burst=20 nodelay;

# 隱藏 Nginx 版本
server_tokens off;

# 防止點擊劫持
add_header X-Frame-Options "SAMEORIGIN" always;

# 禁用不安全的 HTTP 方法
if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {
    return 405;
}

# 阻止常見攻擊
location ~* \.(php|asp|aspx|jsp)$ {
    deny all;
    return 404;
}

# 阻止敏感檔案存取
location ~* /(\.|_) {
    deny all;
    return 404;
}

location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
    deny all;
    return 404;
}

# Gzip 壓縮安全配置
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_proxied any;
gzip_comp_level 6;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/json
    application/javascript
    application/xml+rss
    application/atom+xml
    image/svg+xml;

# 快取安全配置
location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
}

# API 安全配置
location /api/ {
    # 限制 API 請求頻率
    limit_req zone=req_limit_per_ip burst=10 nodelay;
    
    # API 專用安全標頭
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # CORS 設定
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        add_header 'Access-Control-Max-Age' 1728000 always;
        add_header 'Content-Type' 'text/plain charset=UTF-8' always;
        add_header 'Content-Length' 0 always;
        return 204;
    }
    
    if ($request_method = 'POST|GET|PUT|DELETE') {
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
    }
}

# WebSocket 安全配置
location /ws/ {
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_cache_bypass $http_upgrade;
    
    # WebSocket 連接限制
    limit_conn conn_limit_per_ip 5;
}

# 上傳檔案安全配置
location /upload/ {
    # 限制上傳大小
    client_max_body_size 100M;
    
    # 限制上傳頻率
    limit_req zone=req_limit_per_ip burst=5 nodelay;
    
    # 檔案類型限制
    if ($request_filename ~* \.(php|asp|aspx|jsp|pl|py|sh|cgi)$) {
        return 403;
    }
}

# 健康檢查端點
location /health {
    access_log off;
    return 200 "healthy\n";
    add_header Content-Type text/plain;
}

# 監控端點安全
location /metrics {
    # 限制存取來源
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    access_log off;
}

# 管理介面安全
location /admin/ {
    # 強制 HTTPS
    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }
    
    # IP 白名單
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    # 額外安全標頭
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
}

# 錯誤頁面安全
error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /error.html;
error_page 500 501 502 503 504 505 506 507 508 510 511 /error.html;

location = /error.html {
    root /usr/share/nginx/html;
    internal;
}

# 日誌安全配置
access_log /var/log/nginx/access.log combined buffer=512k flush=1m;
error_log /var/log/nginx/error.log warn;

# 隱藏系統資訊
location = /nginx_status {
    stub_status;
    allow 127.0.0.1;
    deny all;
    access_log off;
}