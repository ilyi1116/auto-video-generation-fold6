version: '3.8'

services:
  # Trend Service - 端口 8001 (匹配 auth-service 避免衝突，使用 8007)
  trend-service:
    build:
      context: ./services/trend-service
      dockerfile: Dockerfile
    ports:
      - "8001:8007"  # 映射外部 8001 到內部 8007
    volumes:
      - ./services/trend-service/app:/app/app
    environment:
      - DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - e2e-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Video Service - 端口 8003  
  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
    ports:
      - "8003:8004"  # 映射外部 8003 到內部 8004
    volumes:
      - ./services/video-service:/app
      - /tmp:/tmp
    environment:
      - DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/0
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY_ID=test_access_key
      - S3_SECRET_ACCESS_KEY=test_secret_key
      - S3_BUCKET_NAME=test-videos
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - e2e-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Social Service - 端口 8004
  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
    ports:
      - "8004:8006"  # 映射外部 8004 到內部 8006
    volumes:
      - ./services/social-service/app:/app/app
    environment:
      - DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - e2e-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Scheduler Service - 端口 8008
  scheduler-service:
    build:
      context: ./services/scheduler-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    volumes:
      - ./services/scheduler-service/app:/app/app
    environment:
      - DATABASE_URL=postgresql://test_user:test_pass@postgres:5432/test_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - e2e-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5433:5432"  # 使用不同端口避免衝突
    environment:
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_DB: test_db
    volumes:
      - postgres_e2e_data:/var/lib/postgresql/data
      - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/01-init-test-db.sql
    networks:
      - e2e-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # 使用不同端口避免衝突
    command: redis-server --appendonly yes
    volumes:
      - redis_e2e_data:/data
    networks:
      - e2e-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    ports:
      - "9100:9000"  # 使用不同端口避免衝突
      - "9101:9001"
    environment:
      MINIO_ROOT_USER: test_access_key
      MINIO_ROOT_PASSWORD: test_secret_key
    volumes:
      - minio_e2e_data:/data
    networks:
      - e2e-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  # E2E Test Runner
  e2e-tests:
    build:
      context: .
      dockerfile: Dockerfile.e2e
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
    depends_on:
      trend-service:
        condition: service_healthy
      video-service:
        condition: service_healthy
      social-service:
        condition: service_healthy
      scheduler-service:
        condition: service_healthy
    networks:
      - e2e-network
    command: python test_e2e_entrepreneur_workflow.py
    profiles:
      - testing

networks:
  e2e-network:
    driver: bridge

volumes:
  postgres_e2e_data:
  redis_e2e_data:
  minio_e2e_data: