version: '3.8'

# Optimized Docker Compose for enhanced performance, monitoring, and resource efficiency
services:
  # Frontend with advanced caching and compression
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      cache_from:
        - node:18-alpine
        - ${CI_REGISTRY_IMAGE}/frontend:cache
    image: ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA:-latest}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://api-gateway:8000
      - PUBLIC_API_URL=http://localhost:8000
      - NODE_OPTIONS=--max-old-space-size=512
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Gateway with enhanced routing and caching
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      cache_from:
        - python:3.11-slim
        - ${CI_REGISTRY_IMAGE}/api-gateway:cache  
    image: ${CI_REGISTRY_IMAGE}/api-gateway:${CI_COMMIT_SHA:-latest}
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - ENABLE_REDIS_CACHE=true
      - CACHE_TTL=300
      - MAX_CONNECTIONS=1000
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Trend Service with performance optimizations
  trend-service:
    build:
      context: ./services/trend-service
      dockerfile: Dockerfile
      target: production
      cache_from:
        - python:3.11-slim
        - ${CI_REGISTRY_IMAGE}/trend-service:cache
    image: ${CI_REGISTRY_IMAGE}/trend-service:${CI_COMMIT_SHA:-latest}
    ports:
      - "8007:8007"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - WORKER_PROCESSES=2
      - MAX_REQUESTS=1000
      - PREFORK_WORKERS=true
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 512M
        reservations:
          cpus: '0.4'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Video Service with GPU support and enhanced processing
  video-service:
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
      target: production
      cache_from:
        - python:3.11-slim
        - ${CI_REGISTRY_IMAGE}/video-service:cache
    image: ${CI_REGISTRY_IMAGE}/video-service:${CI_COMMIT_SHA:-latest}
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - FFMPEG_THREADS=4
      - VIDEO_PROCESSING_QUEUE=video_high_priority
      - ENABLE_GPU_ACCELERATION=false
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - video_cache:/app/cache
      - /tmp:/tmp:rw
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 15s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  # Social Service with rate limiting
  social-service:
    build:
      context: ./services/social-service
      dockerfile: Dockerfile
      target: production
      cache_from:
        - python:3.11-slim
        - ${CI_REGISTRY_IMAGE}/social-service:cache
    image: ${CI_REGISTRY_IMAGE}/social-service:${CI_COMMIT_SHA:-latest}
    ports:
      - "8006:8006"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
      - MAX_REQUESTS_PER_MINUTE=100
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Scheduler Service with advanced job management
  scheduler-service:
    build:
      context: ./services/scheduler-service
      dockerfile: Dockerfile
      target: production
      cache_from:
        - python:3.11-slim
        - ${CI_REGISTRY_IMAGE}/scheduler-service:cache
    image: ${CI_REGISTRY_IMAGE}/scheduler-service:${CI_COMMIT_SHA:-latest}
    ports:
      - "8008:8008"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - SCHEDULER_TIMEZONE=UTC
      - MAX_CONCURRENT_JOBS=10
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - scheduler_data:/app/storage
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optimized PostgreSQL with performance tuning
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql:ro
      - ./scripts/video_schema.sql:/docker-entrypoint-initdb.d/02-video-schema.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis with clustering support and optimized configuration  
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # MinIO with performance optimizations
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
      MINIO_STORAGE_CLASS_STANDARD: EC:2
      MINIO_CACHE_DRIVES: /cache
      MINIO_CACHE_QUOTA: 80
    volumes:
      - minio_data:/data
      - minio_cache:/cache
    networks:
      - app-network
    command: >
      server /data 
      --console-address ":9001"
      --address ":9000"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=1GB'
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Redis Exporter for monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: redis://redis:6379
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

  # Postgres Exporter for monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: auto-video-net
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  minio_cache:
    driver: local
  video_cache:
    driver: local
  scheduler_data:
    driver: local
  prometheus_data:
    driver: local