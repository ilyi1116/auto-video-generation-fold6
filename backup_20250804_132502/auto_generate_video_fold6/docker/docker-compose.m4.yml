# Docker Compose configuration optimized for MacBook Pro M4 (ARM64)
# This file provides M4-specific optimizations and settings

version: '3.8'

# 擴展基礎配置
x-common-config: &common-config
  platform: linux/arm64
  
x-resource-limits-m4: &resource-limits-m4
  deploy:
    resources:
      limits:
        # M4 專用資源限制，考慮統一記憶體架構
        cpus: '2.0'    # 利用 M4 的高效核心
        memory: 2G     # 考慮統一記憶體架構
      reservations:
        cpus: '1.0'
        memory: 1G

services:
  # Frontend - 針對 M4 優化
  frontend:
    <<: *common-config
    <<: *resource-limits-m4
    build:
      context: ./frontend
      dockerfile: Dockerfile
      platform: linux/arm64
      args:
        - NODE_OPTIONS=--max-old-space-size=4096  # M4 記憶體優化
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=4096
      - UV_THREADPOOL_SIZE=8  # 利用 M4 多核心
    volumes:
      - ./frontend/src:/app/src:cached  # macOS 性能優化

  # API Gateway - ARM64 優化
  api-gateway:
    <<: *common-config
    <<: *resource-limits-m4
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
      platform: linux/arm64

  # Auth Service - 針對 M4 Python 性能優化
  auth-service:
    <<: *common-config
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
      platform: linux/arm64
    environment:
      - PYTHONOPTIMIZE=2  # Python 優化
      - PYTHONHASHSEED=random
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Database - PostgreSQL ARM64 優化
  postgres:
    platform: linux/arm64
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    deploy:
      resources:
        limits:
          cpus: '2.0'  # 利用 M4 強大的單核性能
          memory: 3G   # M4 統一記憶體優化
        reservations:
          cpus: '1.0'
          memory: 1.5G
    command: >
      postgres 
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=8MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./scripts/video_schema.sql:/docker-entrypoint-initdb.d/02-video-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - ARM64 優化配置
  redis:
    platform: linux/arm64
    image: redis:7-alpine
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      redis-server 
      --maxmemory 768mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --save 60 1000
      --tcp-keepalive 300
      --timeout 300
      --databases 16
      --maxclients 1000
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service - 針對 M4 Neural Engine 優化預留
  ai-service:
    <<: *common-config
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
      platform: linux/arm64
      args:
        # 如果使用支援 ARM64 的 ML 庫
        - TORCH_VERSION=2.0.0
        - TORCHVISION_VERSION=0.15.0
    deploy:
      resources:
        limits:
          cpus: '4.0'  # AI 任務需要更多 CPU
          memory: 4G   # ML 模型需要更多記憶體
        reservations:
          cpus: '2.0'
          memory: 2G
    environment:
      - OMP_NUM_THREADS=8  # 優化多線程性能
      - MKL_NUM_THREADS=8
      - OPENBLAS_NUM_THREADS=8
    # 如果需要存取 M4 GPU (Metal Performance Shaders)
    # 注意：這需要 Docker Desktop 支援
    # devices:
    #   - /dev/dri:/dev/dri

  # Video Service - 影片處理 ARM64 優化
  video-service:
    <<: *common-config
    build:
      context: ./services/video-service
      dockerfile: Dockerfile
      platform: linux/arm64
    deploy:
      resources:
        limits:
          cpus: '3.0'  # 影片處理需要更多資源
          memory: 3G
        reservations:
          cpus: '1.5'
          memory: 1.5G
    environment:
      - FFMPEG_THREADS=8  # FFmpeg 多線程優化
    # 可能需要的音視頻處理庫
    # volumes:
    #   - /opt/homebrew/lib:/usr/local/lib:ro  # M4 Homebrew 庫

  # MinIO - ARM64 S3 兼容存儲
  minio:
    platform: linux/arm64
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # 監控服務 - ARM64 優化
  prometheus:
    platform: linux/arm64
    image: prom/prometheus:latest
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'  # M4 SSD 優化
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--query.max-concurrency=8'  # 利用 M4 多核心

  grafana:
    platform: linux/arm64
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/postgres_data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: ${PWD}/volumes/redis_data
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/volumes/minio_data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# M4 特定的環境變數建議
# 在 .env 文件中設置：
# DOCKER_BUILDKIT=1
# COMPOSE_DOCKER_CLI_BUILD=1
# DOCKER_DEFAULT_PLATFORM=linux/arm64