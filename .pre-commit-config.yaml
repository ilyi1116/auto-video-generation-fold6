# Pre-commit 配置檔案
# 確保每次提交前進行代碼品質檢查
# 適配現代化微服務架構

repos:
  # Python 代碼格式化與檢查
  - repo: https://github.com/psf/black
    rev: 24.0.0
    hooks:
      - id: black
        language_version: python3
        args: ["--line-length=100", "--target-version=py311"]
        files: ^src/.*\.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black", "--line-length=100", "--filter-files"]
        files: ^src/.*\.py$

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args:
          - "--max-line-length=100"
          - "--max-complexity=10"
          - "--extend-ignore=E203,E501,W503,E302,W391"
          - "--per-file-ignores=__init__.py:F401"
        files: ^src/.*\.py$

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: 
          - types-redis
          - types-requests
          - types-python-dateutil
          - pydantic
        args: ["--ignore-missing-imports", "--no-strict-optional"]
        files: ^src/.*\.py$

  # 安全性檢查
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "src/", "-f", "json", "-o", "bandit-report.json"]
        pass_filenames: false

  # 通用檢查
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-added-large-files
        args: ["--maxkb=2048"]
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-docstring-first
      - id: check-case-conflict

  # Dockerfile 檢查
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: ["--ignore", "DL3008", "--ignore", "DL3009", "--ignore", "DL3018"]
        files: ^.*Dockerfile.*$

  # 前端檢查 (SvelteKit)
  - repo: local
    hooks:
      - id: frontend-lint
        name: Frontend ESLint & Prettier
        entry: bash -c 'cd src/frontend && npm run lint && npm run format:check'
        language: system
        files: ^src/frontend/
        pass_filenames: false

      - id: frontend-typecheck
        name: Frontend TypeScript Check
        entry: bash -c 'cd src/frontend && npm run check'
        language: system
        files: ^src/frontend/
        pass_filenames: false

      - id: frontend-test
        name: Frontend Tests with Coverage (≥80%)
        entry: bash -c 'cd src/frontend && npm run test:coverage'
        language: system
        files: ^src/frontend/
        pass_filenames: false

  # Python 測試與覆蓋率
  - repo: local
    hooks:
      - id: pytest
        name: Python Tests with Coverage (≥80%)
        entry: bash -c 'python -m pytest tests/ --cov=src --cov-fail-under=80 --cov-report=term-missing'
        language: system
        files: ^src/.*\.py$
        pass_filenames: false

      - id: service-tests
        name: Individual Service Tests
        entry: bash -c 'for service in src/services/*/; do if [ -d "$service/tests" ]; then echo "Testing $service"; python -m pytest "$service/tests" --cov="$service" --cov-report=term-missing; fi; done'
        language: system
        files: ^src/services/.*\.py$
        pass_filenames: false

  # 配置檔案驗證
  - repo: local
    hooks:
      - id: config-validation
        name: Validate Configuration Files
        entry: python scripts/validate-configs.py
        language: system
        files: ^config/.*\.(env|yaml|yml|json)$
        pass_filenames: false

      - id: docker-compose-validation
        name: Validate Docker Compose Files
        entry: bash -c 'for file in docker-compose*.yml; do docker-compose -f "$file" config > /dev/null; done'
        language: system
        files: ^docker-compose.*\.yml$
        pass_filenames: false

  # 安全掃描
  - repo: local
    hooks:
      - id: dependency-check
        name: Python Dependency Security Check
        entry: bash -c 'python -m safety check --json --output safety-report.json || echo "Security check completed with warnings"'
        language: system
        files: ^pyproject\.toml$
        pass_filenames: false

      - id: npm-audit
        name: Frontend Dependency Security Check
        entry: bash -c 'cd src/frontend && npm audit --audit-level=moderate || echo "NPM audit completed with warnings"'
        language: system
        files: ^src/frontend/package.*\.json$
        pass_filenames: false

  # 程式碼品質檢查
  - repo: local
    hooks:
      - id: complexity-check
        name: Code Complexity Check
        entry: bash -c 'python -m radon cc src/ --min B --show-complexity'
        language: system
        files: ^src/.*\.py$
        pass_filenames: false

      - id: dead-code-check
        name: Dead Code Detection
        entry: bash -c 'python -m vulture src/ --min-confidence 80'
        language: system
        files: ^src/.*\.py$
        pass_filenames: false

  # API 文檔驗證
  - repo: local
    hooks:
      - id: openapi-validation
        name: OpenAPI Schema Validation
        entry: bash -c 'python scripts/validate-openapi-schemas.py'
        language: system
        files: ^src/services/.*/.*\.py$
        pass_filenames: false

  # 提交訊息格式檢查
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

exclude: |
  (?x)^(
    src/frontend/node_modules/.*|
    src/frontend/build/.*|
    src/frontend/.svelte-kit/.*|
    .*/venv/.*|
    .*/__pycache__/.*|
    .*\.pyc$|
    .*\.pyo$|
    legacy/.*|
    backup_.*/.*|
    .*\.old/.*|
    bandit-report\.json|
    safety-report\.json|
    coverage\.xml|
    .*\.coverage
  )$

# CI 模式設定
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false